#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃変更機能→命中プロセスのアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
from ...データセット import データセット as DS
from ...汎用部品     import 入力
from ...汎用部品     import 音声

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    #□ 得点
    通常点       = 10 # ボーナス条件を満たさないときの得点
    ボーナス点   = 50 # ボーナス条件を満たしたときの得点
    ボーナス条件 = 30 # このプレイ時間以内に再度命中するとボーナス条件を満たす

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    #□ ボーナス判定の基礎情報
    前回命中 = DS.仕様.プレイ時間

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):   #① 個体オブジェクト
        #┬
        #≫データセットを用意する
        self.仕様   = 仕様クラス()
        self.情報   = 情報クラス()
        #│
        #○個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│カモロボの信号(LEDがON/OFF)に応じて、命中回数を更新する。
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◎└┐センサをスキャンする
        for ポートNo in self._仕様.ポート一覧:
            #│＼（全ポートを走査した場合）
            #│ ↓
            #│ ▼走査を終了する
            #│
            #●カモロボの状況を用意する
            結果 = 入力.入力走査(ポートNo)
            if 結果[1] == 1 and self._情報.反応回数 == 0:
            #　 ＼（LEDが『ON』で『最初の反応』の場合）
                #↓
                #●命中状態にする
                self.Fnリアクション状態()
                #┴
            #│
            #○リアクション状態を確認する
            if 結果[1] != -1: return
            #│＼（LEDが『ON→OFF』ではない場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #○反応回数を更新する
            self._情報.反応回数 += 1
            if self._情報.反応回数 > self._仕様.反応回数:
            #　 ＼（『最後の反応』の場合）
                #↓
                #○反応回数をリセットする
                self._情報.反応回数 = 0
                #│
                #○前回命中をリセットする
                self.情報.前回命中 = DS.情報.プレイ時間
        #┴　┴　┴
    #────────────────────────────────────
    def Fnリアクション状態(self):
        #┬
        #○反応回数を1にする
        self._情報.反応回数   = 1
        #│
        #○命中タイマをセットする
        self._情報.命中タイマ = self._仕様.命中タイマ
        #│
        #○命中回数を加算する
        self._情報.命中回数 += 1
        #│
        #○ボーナス判定を確認する
        経過時間 = self.情報.前回命中 - DS.情報.プレイ時間 
        判定     = 経過時間 <= self.仕様.ボーナス条件
        if 判定: 音声.クリック音()
        #│＼（ボーナス認定の場合）
        #│ ↓
        #│ ●ボーナス音を鳴らす
        #│ ┴
        #│
        #○得点を加える
        得点 = (self.仕様.ボーナス点) if 判定 else (self.仕様.通常点)
        DS.情報.得点[self._仕様.チームNo] += 得点
        #┴
