#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能(表現プロセス)のアクションメソッドを実行
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# [システム共通]
import pyxel

# [ゲーム共通]
from ...データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│プロセスを実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●描画アクションを実行する
        self.Fnオブジェクト別((
                DS.obj.背景    ,
                DS.obj.敵機    ,
                DS.obj.アイテム,
                DS.obj.自機    ,
                DS.obj.弾_自機 ,
                DS.obj.弾_敵機 ,
                DS.obj.爆発    ))
        #│
        #●シーン別で表現する
        DS.obj.シーン[DS.情報.シーン].FN表現.実行()
        #│
        #●機能横断の表現
        self.Fn機能横断()
        #┴

	#────────────────────────────────────
    # オブジェクト別でプロセスを実行
	#────────────────────────────────────
    def Fnオブジェクト別(self, 引数_対象一覧):
        #┬
        #◎└┐引数からオブジェクトを抽出し描画する
        for 各対象 in 引数_対象一覧:
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #◇┐オブジェクトを描画する
            if isinstance(各対象, list):
            #　├┐（引数の要素が一覧の場合）
                #↓
                #◎└┐更に分解し描画する
                for 各要素 in 各対象:
                    #│＼（すべての処理を終えた場合）
                    #│ ↓
                    #│ ▼繰り返し処理を抜ける
                    #│
                    #≫アクション・メソッドでオブジェクトを描画する
                    各要素.FN表現.実行()
                    #┴ 

            elif 各対象 is not None:
            #　├┐（引数の要素がオブジェクト化している場合）
                #↓
                #≫アクション・メソッドでオブジェクトを描画する
                各対象.FN表現.実行()
            #　└┐（その他）
        #┴　┴　┴

    #┌───────────────────────────────────
    #│機能横断の表現
    #└───────────────────────────────────
    def Fn機能横断(self):
        #┬
        #○ゲーム情報（得点／難易度）を描画する
        pyxel.text( 5, 2, f"SCORE:{ DS.情報.得点   }", 7)
        pyxel.text(82, 2, f"STAGE:{ DS.情報.難易度 }", 7)
        #┴
