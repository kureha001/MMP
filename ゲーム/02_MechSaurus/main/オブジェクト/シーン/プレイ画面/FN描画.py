#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ画面(描画機能)
#┠─────────────────────────────────────
#┃描画コントローラが描画プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.GAME共通                         as 共通処理
from   main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 描画クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        pass
    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│※自機が無い場合は表示不可 または 意味がない為、処理をスキップする
    #└───────────────────────────────────
    def 実行(self):
        #┬
        出力 = DS.情報.プレイ時間
        pyxel.text(54, 2, f"{str(出力).zfill(3)}", 10)
        #◎└┐発電機のサイクルを描画する
        for i in range(2):
            #│
            #○発電量を求める
            運搬機      = DS.obj.運搬機[i]
            出力        = 運搬機.情報.出力電力
            画面高      = DS.仕様.画面高
            最低出力    = 運搬機.仕様.最低出力
            最高出力    = 運搬機.仕様.最高出力
            長さ        = int(((出力-最低出力)/(最高出力-最低出力)) * 画面高)
            開始        = 画面高 - 長さ
            #│
            #○発電量を描画する
            pyxel.rect(10+70*i,開始, 30,長さ, 15)               # 矩形描画
            pyxel.text((10+8+70*i), (画面高-10), str(出力), 8)  # 数値表示
            #│
            #◇┐ペダル･ガイダンスを描画する
            角度     = DS.obj.発電機[i].情報.角度
            左右判定 = 共通処理.発電機.右足判定(角度)
            if 左右判定: pyxel.blt(25+70*i,25+55*i, 0, 80,0, 24,56, 0)
            else       : pyxel.blt( 2+70*i,25+55*i, 0, 56,0, 24,56, 0)
            #　├┐（フレーム処理タイミングの場合）
                #↓
                #○右足を描画する
            #　└┐（その他）
                #↓
                #○左足を描画する
        #┴　┴　┴
