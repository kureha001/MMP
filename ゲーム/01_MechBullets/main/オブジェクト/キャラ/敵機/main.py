#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクター：敵機
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from   main.データセット import データセット as DS
from  .DB                import 機体ID, 敵機DB, ボスDB
from  .FN動作            import 本体 as 動作機能の生成
from  .FN衝突            import 本体 as 衝突機能の生成
from  .FN発射            import 本体 as 発射機能の生成
from  .FN表現            import 本体 as 表現機能の生成

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    def __init__(self           ,
            引数_種類ID         ,   #① 機体 または アイテム を識別するID
            引数_アイテム区分   ,   #② アイテムをし区別する区分
            引数_ボス区分       ):  #③ ボスキャラを区別
        #--------------------------------------------------------------------
        # 識別
        #--------------------------------------------------------------------
        #□ 種類ID ※機体ID｜ボスID｜アイテムID
        #□ 検索ID ※DB検索に使用する機体ID
        self.種類ID     = 引数_種類ID
        self.検索ID     = (機体ID.アイテム) if 引数_アイテム区分 else (引数_種類ID)

        #--------------------------------------------------------------------
        # 属性区分
        #--------------------------------------------------------------------
        #□ アイテム区分 ：アイテム(True)/敵機(False)で区分 
        #□ ボス区分     ：敵機をボス(True)/ザコ(False)で区分 
        self.アイテム区分 = 引数_アイテム区分
        self.ボス区分     = 引数_ボス区分

        #--------------------------------------------------------------------
        # 格納先
        #--------------------------------------------------------------------
        #□格納先        ： オブジェクトの格納先(一覧)
        self.格納先       = (DS.obj.アイテム) if self.アイテム区分 else (DS.obj.敵機)
        self.DB           = (ボスDB) if self.ボス区分 else (敵機DB)

        #--------------------------------------------------------------------
        # 攻守情報
        #--------------------------------------------------------------------
        #□威力(体当たり)
        self.威力 = self.DB[ self.検索ID ][3][1]
        if self.威力 < 0: self.威力 = 9999

        #□衝突範囲
        if self.アイテム区分:
            ゆとり  = 0
            幅      = DS.仕様.キャラ幅.通常 - 1
            #┴
        elif self.ボス区分:
            ゆとり  = DS.仕様.キャラ幅.ボス // 3
            幅      = DS.仕様.キャラ幅.ボス
            #┴
        else:
            ゆとり = 1
            幅      = DS.仕様.キャラ幅.通常 - 1
        self.衝突範囲 = (0+ゆとり,0+ゆとり, 幅-ゆとり,幅-ゆとり)
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    def __init__(self   ,
            引数_X座標  ,	#① 画面位置(X座標)
            引数_Y座標  ,   #② 画面位置(Y座標)
            引数_仕様   ):  #③ 仕様
        #--------------------------------------------------------------------
        # 位置
        #--------------------------------------------------------------------
        #□ 画面位置(X座標)
        #□ 画面位置(Y座標)
        self.X = 引数_X座標
        self.Y = 引数_Y座標

        #--------------------------------------------------------------------
        # 残量
        #--------------------------------------------------------------------
        #□ シールド ※DB値が負数の場合は9999に設定
        self.シールド = 引数_仕様.DB[ 引数_仕様.検索ID ][3][2]
        if self.シールド < 0: self.シールド = 9999

        #--------------------------------------------------------------------
        # カウンタ
        #--------------------------------------------------------------------
        #□ 経過時間 ※ランダムで時間をずらす
        反転間隔      = 引数_仕様.DB[ 引数_仕様.検索ID ][1][2]
        self.経過時間 = pyxel.rndi(0, 反転間隔)

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    def __init__(self           ,
        引数_X座標              ,	#① 出現させる位置(X座標)
        引数_Y座標              ,   #② 出現させる位置(Y座標)
        引数_種類ID             ,   #③ 出現させる機体/アイテムのID
        引数_アイテム区分       ,   #④ アイテムを区別
        引数_ボス区分 = False   ):  #⑤ ボスキャラを区別
        #┬
        #≫データセットを用意する
        self.仕様 = 仕様(引数_種類ID, 引数_アイテム区分, 引数_ボス区分)
        self.情報 = 情報(引数_X座標, 引数_Y座標, self.仕様)
        #│
        #≫処理セットを用意する
        self.FN動作 = 動作機能の生成(self)
        self.FN衝突 = 衝突機能の生成(self)
        self.FN発射 = 発射機能の生成(self)
        self.FN表現 = 表現機能の生成(self)
        #│
        #○用意済みのインスタンスに生成する
        self.仕様.格納先.append(self)
        #┴