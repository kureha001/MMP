#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ画面(描画機能)
#┠─────────────────────────────────────
#┃描画コントローラが描画プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    main.データセット   import データセット as DS
import  main.GAME共通                           as 共通処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 描画クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        pass
    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│※自機が無い場合は表示不可 または 意味がない為、処理をスキップする
    #└───────────────────────────────────
    def 実行(self):
        #┬
        出力 = DS.情報.プレイ時間
        pyxel.text(54, 2, f"{str(出力).zfill(3)}", 10)
        #◎└┐発電機のサイクルを描画する
        for i in range(2):

            出力 = DS.obj.運搬機[i].情報.出力
            画面高      = DS.仕様.基本.画面高
            最低出力    = DS.仕様.運搬機.最低出力
            最高出力    = DS.仕様.運搬機.最高出力
            長さ        = int(((出力-最低出力)/(最高出力-最低出力)) * 画面高)
            開始        = 画面高 - 長さ
            pyxel.rect(10+70*i,開始, 30,長さ, 15)

            pyxel.text((10+8+70*i), (画面高-10), str(出力), 8)

            角度 = DS.obj.発電機[i].情報.角度
            if 共通処理.発電機.右足判定(角度):
                pyxel.blt(25+70*i,25+55*i, 0, 80,0, 24,56, 0)
            else:
                pyxel.blt( 2+70*i,25+55*i, 0, 56,0, 24,56, 0)
        #┴　┴
