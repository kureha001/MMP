#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃特殊効果(衝突機能)
#┠─────────────────────────────────────
#┃更新コントローラが衝突プロセスで実行するアクション・メソッド
#┃※アイテムを取得した場合のみ更新コントローラからキックされる
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  main.GAME共通       as 共通処理
from    main.データセット   import データセット as DS
from    .DB                 import *

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 衝突クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_基底 ): #① 基底オブジェクト
        #┬
        #〇上位オブジェクトのリファレンスを用意する
        self._情報  = 引数_基底.情報
        #│
        #○外部オブジェクトのリファレンスを用意する
        self.共仕   = DS.obj.自機共通.仕様
        self.共情   = DS.obj.自機共通.情報
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│補給系／特殊効果系により、処理を分岐する
    #└───────────────────────────────────
    def 実行(self           ,
           引数_アイテムID  ):  #① アイテムのオブジェクト
        #┬
        #●取得音を鳴らす
        共通処理.効果音.アイテム取得()
        #│
        #◇┐アイテム区分を照会し効果を発動する
        効果ID = アイテムDB[ 引数_アイテムID  ][0]
        if 効果ID == 効果ID.補給:
        #　├┐（退避した持続時間が『マイナス』の場合）
            #↓
            #●補給系の効果を発動する
            self.Fn補給( 引数_アイテムID  )
            #┴
        else:
        #　└┐（その他）
            #● 効果を発動する
            self.Fn効果発動( 引数_アイテムID  )
            #┴

    #┌───────────────────────────────────
    #│補給系アイテム
    #├───────────────────────────────────
    #│補給のみで、発動中辞書には登録しない
    #└───────────────────────────────────
    def Fn補給(self         ,
            引数_アイテムID   ):   #① アイテムのオブジェクト
        #┬
        #◇┐アイテムIDを照会し補給する
        if 引数_アイテムID == アイテムID.弾薬:
        #　├┐（アイテムIDが『弾薬』の場合）
            #↓
            #○弾数を最大まで回復する
            self.共情.弾数 = self.共仕.積載量
            #┴
        elif 引数_アイテムID == アイテムID.シールド:
        #　├┐（アイテムIDが『シールド』の場合）
            #↓
            #○シールドを最大まで回復する
            self.共情.シールド = DS.obj.自機共通.仕様.シールド総量
            #┴
        #　└┐（その他）
        #┴　┴

    #┌───────────────────────────────────
    #│特殊効果系アイテム
    #├───────────────────────────────────
    #│特殊効果系(永続型・非永続型)アイテムの効果を発動中辞書に登録する
    #└───────────────────────────────────
    def Fn効果発動(self, 引数_アイテムID): #① アイテムを識別するID
        #┬
        #○アイテムDBより各種パラメータを取得する
        効果キー = アイテムDB[ 引数_アイテムID ][0]
        持続時間 = アイテムDB[ 引数_アイテムID ][2][0]
        登録内容 = アイテムDB[ 引数_アイテムID ][2][1]
        #│
        #◇┐同じ効果で発動中のエントリから登録値を控える
        if 効果キー in self._情報.発動中:
        #　├┐（同じ効果が発動中の場合）
            #↓
            #○エントリから既存値を控える
            既存値 = self._情報.発動中[ 効果キー ][1]
            #│
            #○エントリの削除する
            del self._情報.発動中[ 効果キー ]
            #┴
        else:
        #　└┐（その他）
            #↓
            #○既存値なし(ゼロ値)で用意する
            既存値 = 0
            #┴
        #│
        #◇┐登録値を用意する
        if isinstance(登録内容, tuple):
        #　├┐（登録内容パラメータが『加算型(タプル)』の場合）
            #↓
            #○登録値を『上限を超えない範囲』で用意する
            追加値      = 登録内容[0]
            上限値      = 登録内容[1]
            既存値なし  = (既存値 == 0)
            登録値      = (追加値) if 既存値なし else (min((既存値 + 追加値),上限値))
            #┴
        else:
        #　└┐（その他）
            #↓
            #○登録値を『登録内容のまま』で用意する
            登録値 = 登録内容
            #┴
        #│
        #○用意した登録値で、効果を発動する
        self._情報.発動中[ 効果キー ] = ( 持続時間 , 登録値 )
        #│
        #●プレイ画面のBGMを鳴らす
#        if 効果キー == 効果ID.防御: 共通処理.BGM_JSON.バリヤ()
        #┴