#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能(表現プロセス)のアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# [システム共通]
import  pyxel

# [ゲーム共通]
from    main.データセット               import DS

# [別クラス]
from    main.オブジェクト.管理.特殊効果 import 効果ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self   ,
            引数_仕様   ):  #① 所有者を識別するID
        #--------------------------------------------------------------------
        # イメージバング
        #--------------------------------------------------------------------
        #□ 画像     ：イメージバンクの切り出し条件
        キャラ幅 = DS.仕様.リソース.キャラ幅.通常
        x = 引数_仕様.番号 * キャラ幅
        y = DS.仕様.リソース.画像Y.自機
        座標 = (x,y)
        サイズ = (キャラ幅,キャラ幅)
        self.画像 = (0, *座標, *サイズ, 0)

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._上位 = 引数_上位
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #○外部オブジェクトのリファレンスを用意する
        self.特情   = DS.obj.特殊効果.情報
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self._仕様)
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●バリヤーを描画する
        self.Fnバリヤー()
        #│
        #○画像情報に基づき描画する
        pyxel.blt(self._情報.X, self._情報.Y, *self.仕様.画像)
        #┴
	#────────────────────────────────────	
    def Fnバリヤー(self):
        #┬
        #●特殊効果から、ダメージ倍率を求める
        発動状況 = self.特情.発動中
        キー   = 効果ID.防御
        ダメージ倍率 = (発動状況[キー][1]) if キー in 発動状況 else (1)
        #│
        #◇┐機体の画像情報を求める
        if   ダメージ倍率 >= 1:
        #　├┐（ダメージ倍率が『標準』の場合）
            #↓
            #○バリアーなし
            return
            #┴
        elif ダメージ倍率 == 0  : x = 1
        #　├┐（ダメージ倍率が『無敵』の場合）
            #↓
            #○仕様の画像情報を『無敵用』の座標に変更する
            #┴
        elif ダメージ倍率 < 0   : x = 2
        #　├┐（ダメージ倍率が『吸収』の場合）
            #↓
            #○仕様の画像情報を『吸収用』の座標に変更する
            #┴
        else                    : x = 0
        #　└┐（その他）
            #↓
            #○仕様の画像情報を『半減用』の座標に変更する
            #┴
        #│
        #○バリヤーを描画する
        画像 = (0, 32 + (x * 16),0, 16,16, 0)
        x    = self._情報.X - 4
        y    = self._情報.Y - 4
        pyxel.blt(x, y, *画像)
        #┴