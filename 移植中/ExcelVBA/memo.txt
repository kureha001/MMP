自動計測プログラム作成 Excel/VBA で VISA COM を使用
https://docs.keysight.com/kkbopen/excel-vba-visa-com-749640205.html
---------------------


いいですね！Excel VBA 版は “現場で即使える計測・可視化フロント” になります。
ここから一気に作れるように、設計指針＋最小実装スケルトンをまとめました。
VISA は **Keysight IO Libraries（VISA-COM）**を第一候補、必要なら **visa32.dll（VISA-C）**を代替にします。

---------------------
アーキテクチャ（Python と同じ発想）
・Core（環境非依存）：プロトコル/コマンド実装（5バイト応答、「!」終端、ゼロ埋めHEX整形、受信ループなど）
・Adapter（環境依存）：I/O 抽象化（open/close/read/write/flush/timeout）
・Wrapper（利便）：Excel から簡単に使える薄いクラス（接続オート/指定、ユーティリティ）

---------------------
Excel 構成（推奨）
・cMmpCore.cls …… コア（Python Core 相当）
・cVisaComAdapter.cls …… VISA-COM アダプタ
・mGlobals.bas …… 共通宣言（Sleep/タイマ、HEX整形、エラー処理）
・（拡張）cVisaCAdapter.bas …… visa32.dll 直叩き版（後日最適化用）
・ModuleSamples.bas …… サンプル（ボタン用マクロ、シート記録）

---------------------
事前準備（Excel）
1.Keysight IO Libraries Suite をインストール
2.VBA で参照設定：“VISA COM x.x Type Library（VisaComLib / Ivi.Visa.Interop）”
  早期バインディング（推奨）／後述の遅延バインディングでも可
3.64bit Office でも動くよう API 宣言は PtrSafe

---------------------
5) 方針・注意点
・プロトコル互換：Python と同じ 5バイト応答・HEX フォーマット・終端 ! を厳守
・受信高速化：VISA-COM には in_waiting が無いので、短周期ポーリング＋ReadUpToで代替
　　・読込調整（例：64）を増やすとスループット↑、レイテンシはやや↑
　　・必要に応じて visa32.dll 直叩きアダプタを後日追加（VI_ATTR_ASRL_AVAIL_NUM で in_waiting 相当を取得できる）
・タイムアウト：Timeout は ms。短すぎるとタイムアウト頻発、長すぎると体感遅延↑
・Excel の UI 応答：ループ内で DoEvents を適宜入れる
・配布：*.xlsm にクラス/モジュールを内包すれば配布容易。VISA は各PCにインストール必須
・グラフ化：シートに追記し、折れ線グラフを既定範囲にリンクしておくと自動更新

---------------------
6) 次の一手（拡張）
・visa32.dll アダプタ（cVisaCAdapter.bas）：viSetAttribute/viRead/viWrite/viOpen を Declare で直呼び（in_waiting 相当で高速安定）
・スレッド風ポーリング：Application.OnTime で定期取得、表/グラフのライブ更新
・エラーマップ：タイムアウトや不正応答のセル表示／ログ出力
・ユーティリティ：PWM_スイープ、MP3_再生 相当のヘルパ群を VBA に移植

---------------------
必要なら、このスケルトンをそのまま貼れる .bas/.cls 形に整えてお渡しします。
まずは VISA-COM 版で通し、計測～グラフ化までひと流し → その後 visa32.dll 直叩き最適化、の順が安全です。



---------------------
はい、64bit Office でも動作させられます。
ただし、いくつか“64bit 前提”の前提条件＆小さな調整が必要です。

動かすための条件
・**Keysight IO Libraries（64bit を含む版）**をインストール
　→ 64bit Excel は 64bit の COM サーバしか呼べません。
　　　IO Libraries に同梱の VISA-COM 64bit がレジストリ登録されている必要があります。
・VBA の参照設定で 「VISA COM x.x Type Library」（64bit側）を選択
　もしくは 遅延バインディングにして参照設定なしでも動くようにします（下にサンプルあり）。
・Windows API 宣言は PtrSafe。

---------------------
推奨の互換ボイラープレート
1) Sleep の宣言（VBA7/x86/x64 互換）
#If VBA7 Then
    ' 64bit/32bit 両対応（VBA7 以降）
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr)
#Else
    ' 旧VBA（32bit）
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

---------------------
2) VISA-COM の遅延バインディング（参照設定不要）
' ResourceManager の生成（複数ベンダーの ProgID を順に試す）
Private Function CreateVisaRM() As Object
    Dim cands As Variant, p As Variant
    cands = Array( _
        "VISA.ResourceManager", _                ' 一般的
        "AgilentVisaComLib.ResourceManager", _   ' 旧Agilent表記
        "KeysightVisaComLib.ResourceManager", _  ' Keysight表記
        "Ivi.Visa.Interop.ResourceManager" _     ' IVI .NET Interop 経由
    )
    For Each p In cands
        On Error Resume Next
        Set CreateVisaRM = CreateObject(p)
        If Err.Number = 0 Then Exit Function
        On Error GoTo 0
    Next
    Set CreateVisaRM = Nothing
End Function

・生成できた rm に対して rm.FindRsrc("ASRL?*INSTR") などを使えば、x86/x64 を意識せず実行できます。
・早期バインディング（参照設定あり）で行く場合は、64bit 側の Type Library を選ぶだけでOKです。

---------------------
visa32.dll を直接叩く案について
・64bit Office では visa32.dll は使えません。visa64.dll を使います。
・将来 C API アダプタを追加する場合は、条件付きで DLL を切り替えてください：
#If Win64 Then
    Private Const VISA_DLL As String = "visa64.dll"
#Else
    Private Const VISA_DLL As String = "visa32.dll"
#End If
' → Declare PtrSafe / LongPtr を適切に使う

・とはいえ、まずは VISA-COM（COM オブジェクト）版で完成させるのが一番楽＆安全です。

---------------------
この先の注意点（64bit 時）
・in_waiting 相当が無いため、現状どおり 短周期ポーリング＋まとめ読み(ReadUpTo) でOK。
　読込調整（既定 64）を環境に合わせて調整するとスループットが安定します。
・Excel の UI 固まり対策として、ループ内の DoEvents はそのまま維持。
・参照設定で “VISA COM” が見つからない場合は、Keysight IO Libraries の再インストールで 64bit COM を入れ直すと解決することが多いです。

---------------------
結論：上の条件を満たせば、提示した VBA スケルトンは 64bit Office で問題なく動作します。
実装は（1）VISA-COM 遅延バインディング、（2）PtrSafe 宣言、（3）ReadUpTo ポーリング ——の3点を守ればOKです。