#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：敵機(衝突プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが衝突プロセスで実行するアクション・メソッド
#┃・下位にデータセット･クラス(仕様)を持つ
#┃※シールドが切れた際、オブジェクトを削除する
#┃※爆発オブジェクトを生成する直接のトリガとなる
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.共通部品 as 共通部品
from   main.データセット           import DS
from   main.オブジェクト.演出.爆発 import 爆発生成

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self   ,
            引数_仕様   ):  #① 個体の仕様
        #┬
        #□爆発座標のオフセット  
        幅 = (DS.仕様.キャラ幅.ボス) if 引数_仕様.ボス区分 else (DS.仕様.キャラ幅.通常)
        self.爆発オフセット = 幅 // 2
        #│
        #□点数
        self.点数 = 引数_仕様.DB[ 引数_仕様.検索ID ][0]
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:
    def __init__(self   ,
            引数_仕様   ):  #① 個体の仕様
        #┬
        #□ シールド ※DB値が負数の場合は9999に設定
        self.シールド = 引数_仕様.DB[ 引数_仕様.検索ID ][3][2]
        if self.シールド < 0: self.シールド = 9999
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._上位 = 引数_上位
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self._仕様)
        self.情報   = 情報クラス(self._仕様)
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│・アイテムの取得では爆発は無い
    #│・強制破壊の場合、アイテムも爆発する
    #│・シールド切れで爆破する
    #│・シールドが残っていれば爆破しないが、爆破音はある
    #└───────────────────────────────────
    def 実行(self,
            argダメージ = 0 ):  #① 受けるダメージ   ※0：強制破壊
        #┬
        #○シールドにダメージを与える
        破壊判定 = (argダメージ == 0)
        self.情報.シールド = (0) if 破壊判定 else (self.情報.シールド - argダメージ)
        #│
        #◇┐消滅する
        if self._仕様.アイテム区分 and not 破壊判定:
        #　├┐（アイテムを損傷(消滅)させる場合）
            #↓
            #●格納先から削除する
            self._仕様.格納先.remove(self._上位)
            #┴

        elif self.情報.シールド <= 0:
        #　├┐（シールド切れの場合）
            #↓
            #●大きく爆破する
            self.Fn爆破()
            #│
            #○スコアを加算する
            DS.情報.得点 += self.仕様.点数
            #│
            #●格納先から削除する
            if self._上位 in self._仕様.格納先: self._仕様.格納先.remove(self._上位)
            #┴

        else:
        #　└┐（その他）
            #↓
            #●爆発する
            #●爆発音を鳴らす
            self.Fn爆発(6)
            共通部品.効果音.爆発(0)
        #┴　┴

    #┌───────────────────────────────────
    #│爆発を指示
    #├───────────────────────────────────
    #│・ボスとそれ以外で処理が異なる
    #│・ボスシーンの終了処理がある
    #│・実際の爆発オブジェクト生成はここではない（指示のみ）
    #└───────────────────────────────────
    def Fn爆破(self):
        #┬
        #◇┐個体を破壊する
        if self._仕様.ボス区分:
        #　├┐（ボスの場合）
            #↓
            #●大爆発する
            x = self._情報.X + self.仕様.爆発オフセット
            y = self._情報.Y
            共通部品.爆発.大爆発(x, y, 22, 14)
            #┴
        else:
        #　└┐（その他）
            #↓
            #●爆発する
            #●爆発音を鳴らす
            self.Fn爆発(8)
            共通部品.効果音.爆発(1)
            #┴
        #┴

    #┌───────────────────────────────────
    #│爆発オブジェクトを生成
    #├───────────────────────────────────
    #│実際の爆発オブジェクト生成はここでおこなう
    #└───────────────────────────────────
    def Fn爆発(self         ,
             引数_半径      ):   #① 爆発の大きさ(半径)
        #┬
        #≫アクション・メソッドで爆発を生成する
        x = self._情報.X + self.仕様.爆発オフセット
        y = self._情報.Y + self.仕様.爆発オフセット
        爆発生成(x, y, 引数_半径)
        #┴