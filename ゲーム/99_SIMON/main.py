# filename : main.py
# =========================================
# Ｂ層(ビジネス・ロジック層)
# 全体・画面のシーケンスを定義・管理する。
# -----------------------------------------
#  Phase 2.8 : 責務別にファイル分割
# =========================================
from    time import ticks_ms, ticks_diff, sleep_ms

import  Data        as D層  # D層(データベース層)
import  Network     as N層  # N層(ネットワーク層)
import  Function    as F層  # F層(ファンクション層)
import  Presen      as P層  # P層(プレゼンテーション層)

# =========================================
# 画面
# =========================================
# ------------------------
# 開始待ち
# ------------------------
def 画面_開始待ち():
    #┬
    #○前処理
    当該位置 = D層.画面["現在位置"]
    最端位置 = D層.画面["最端位置"]
    #│
    #○当該位置を求める
    当該位置 += 1 if 当該位置 < 最端位置 and P層.btn_色押下(1) else 0
    当該位置 -= 1 if 当該位置 > 0        and P層.btn_色押下(2) else 0
    #│
    #◇┐画面を再描画
    if D層.画面["現在位置"] != 当該位置:
    #　├→(位置に変更があった場合)
        #○画面情報[現在位置]を更新
        #○開始待ち画面を表示
        D層.画面["現在位置"] = 当該位置
        P層.開始待ち()
    #┴ ┴
# ------------------------
# プレイ中
# ------------------------
def 画面_プレイ中():
    #┬
    #○まだプレイ可能かを調査
    now = ticks_ms()
    if ticks_diff(now, D層.状況["開始時刻"]) >= D層.出題["制限時間"]:
    #　＼(時間切れの場合)
        #○終了画面(時間切れ)を表示
        #○終了(state=finish)に状態遷移
        #▼処理を中断
        P層.終了_時間切れ()
        D層.状況["状態"] = "finish"
        return
    #│
    #○ボタン押下を確認
    ok, 回答色ID = P層.btn_色スキャン()
    #　＼(押下なしの場合)
    #　 ▼処理を中断
    if not ok: return
    #│
    #○所要時間を更新
    D層.状況["所要時間"] = ticks_diff(ticks_ms(), D層.状況["開始時刻"])
    #│
    #◇┐色ボタン入力の正誤を判定
    if 回答色ID == D層.出題["問題"][D層.状況["ステップ数"]]:
    #　├→(正解した場合)
        #○ステップ数を更新
        D層.状況["ステップ数"] += 1  
        #│
        #◇全問正解を判定
        if D層.状況["ステップ数"] >= len(D層.出題["問題"]):
        #　├→(ステップ数がシーケンス数に達した場合)
            #○終了画面(クリア)を表示
            #○終了(state=finish)に状態遷移
            P層.終了_クリア()
            D層.状況["状態"] = "finish"
            #┴
        #　└┐(その他)
        else:
            #○プレイ中画面(標準)を表示
            P層.競技中_標準()
            #┴
    #　└┐(その他)
    else:
        #○ミス回数を更新
        D層.状況["ミス回数"] += 1
        #│
        #◇失格判定：
        ミス = D層.状況["ミス回数"  ]
        上限 = D層.出題["ミス上限数"]
        if (上限 > 0 and ミス < 上限):
        #　├→(ミス回数が上限値を超過した場合)
            #○プレイ中画面(ミス)を表示
            P層.競技中_ミス()
        #　└┐(その他)
        else:
            #○終了画面(ミス超過)を表示
            #○終了(state=finish)に状態遷移
            P層.終了_ミス超過()
            D層.状況["状態"] = "finish"
    #┴  ┴　┴

# =========================================
# 処理シーケンス
# =========================================
# ------------------------
# 初期化：P層
# ------------------------
def 初期化_P層():
    P層.spk.duty_u16(0)
    P層.led_全色消灯()
    P層.oled消去()
# ------------------------
# 初期化：N層
# ------------------------
def 初期化_N層():
    #┬
    #○Wifi情報をJSONファイルから取得
    print(" ① Wifi接続情報を取得")
    cfg = N層.設定ファイル読込開始()
    if not cfg:
        print("　<< ERROR 設定ファイル >>")
        return
    #│
    #◎└┐Wifi接続を開始
    print(" ② Wifi接続を開始")
    while True:
        #│
        #◇┐接続を試みる
        if N層.接続開始(cfg):
        #　├→(成功した場合)
            break
        #　└┐(その他)
        else:
            #○エラー表示(スタートボタン押下でリトライ)
            print("　<< ERROR Wifi接続 >>")
            P層.showRaw("[FAILED]", "Retry?", "")
            P層.snd_失格() 
            P層.btn_スタート押下待ち()
        #┴　┴
    #│
    #○F層(WEBA-APIサーバ)を起動(スレッドでポーリング)
    print(" ③ WEBA-APIサーバを起動開始")
    F層.サーバー起動()
    #│
    #○初期画面を表示
    print(" ④ 初期画面を表示")
    #D層.状況["状態"   ] = "idle"
    D層.画面["IP"      ] = "IP:" + D層.ネット["IP"]
    D層.画面["現在位置"] = 0
    D層.画面["最端位置"] = max(0, len(D層.画面["IP"]) - 8)
    P層.showRaw(
        "　ONLINE"                         ,
        "　IP:" + D層.ネット["IP"  ]       ,
        "　PORT" + str(D層.ネット["PORT"]),
        )
    #┴
# ------------------------
# 全体の処理シーケンス
# ------------------------
def main():
    #┬
    #○Ｐ層を初期化
    print("1) 初期化")
    初期化_P層()
    #│
    #○Ｎ層を初期化
    print("2) Wifi接続情報を取得")
    初期化_N層()
    #│
    #○開始待ち画面を表示(位置移動が無いので強制表示)
    print("3) システム起動")
    P層.開始待ち()
    #│
    #◎└┐メイン・シーケンスを処理し続ける
    # ※並列処理でポーリングしており、状態IDが変化する
    while True:
        #◇┐状態に応じて画面遷移
        #　├→(状態が[idle   ]の場合):開始待ち画面へ制御を移譲
        #　├→(状態が[standby]の場合):何もしない
        #　├→(状態が[playing]の場合):プレイ中画面へ制御を移譲
        #　├→(状態が[finish ]の場合):何もしない
        #　├→(状態が[ending ]の場合):何もしない
        #　└┐(その他)
            #○何もしない
            #┴
        状態ID = D層.状況["状態"]
        if   状態ID == "idle"   : 画面_開始待ち()
        elif 状態ID == "standby": pass
        elif 状態ID == "playing": 画面_プレイ中()
        elif 状態ID == "finish" : pass
        elif 状態ID == "ending" : pass
        else                    : pass
        #│
        #○小時間待つ(消費電力を軽減のため)
        sleep_ms(10)
    #┴　┴
# ------------------------
# システム起動
# ------------------------
main()