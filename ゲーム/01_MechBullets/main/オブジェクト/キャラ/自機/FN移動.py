#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機(移動プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┃・下位にデータセット･クラス(仕様)を持つ
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.共通部品 as 共通部品
from   main.データセット               import データセット as DS
from   main.オブジェクト.管理.特殊効果 import 効果ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #│
        #○外部オブジェクトのリファレンスを用意する
        self.共仕   = DS.obj.自機共通.仕様
        self.特情   = DS.obj.特殊効果.情報
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●前進(下方に移動)する
        self.Fn移動()
        #│
        #●場外は消滅する
        self.Fn場外()
        #┴
	#────────────────────────────────────
    def Fn移動(self):
        #┬
        #●操作状況を確認する
        操作 = 共通部品.入出力
        結果 = 操作.入力走査(操作.ID_移動, self._仕様.番号)
        if not 結果[0][0]: return
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●特殊効果から、追加速度を求める
        発動状況 = self.特情.発動中
        キー    = 効果ID.速度
        追加速度 = (発動状況[キー][1]) if キー in 発動状況 else (0)
        #│
        #◇┐移動予定の座標を求める
        x = self._情報.X
        y = self._情報.Y
        v = self.共仕.移動速度 + 追加速度
        if 結果[1][0]: y -= v
        #　├┐（移動指示が『上』の場合）
            #↓
            #○現在のY座標から、速度分マイナスする
            #┴
        if 結果[1][1]: y += v
        #　├┐（移動指示が『下』の場合）
            #↓
            #○現在のY座標から、速度分プラスする
            #┴
        if 結果[1][2]: x -= v
        #　├┐（移動指示が『左』の場合）
            #↓
            #○現在のX座標から、速度分マイナスする
            #┴
        if 結果[1][3]: x += v
        #　├┐（移動指示が『右』の場合）
            #↓
            #○現在のX座標から、速度分プラスする
            #┴
        #　└┐（その他）
            #┴
        #│
        #○移動予定の座標で確定する
        self._情報.X = x
        self._情報.Y = y
        #┴

	#────────────────────────────────────
    def Fn場外(self):
        #┬
        #○補正予定の座標を用意する
        x = self._情報.X
        y = self._情報.Y
        #│
        #○画面内に収めるよう補正する
        x = max(x, 0)
        x= min(x, DS.仕様.画面幅 - DS.仕様.キャラ幅.通常)
        y = max(y, 10) 
        y = min(y, DS.仕様.画面高 - 20)
        #│
        #○補正予定の座標で確定する
        self._情報.X = x
        self._情報.Y = y
        #┴