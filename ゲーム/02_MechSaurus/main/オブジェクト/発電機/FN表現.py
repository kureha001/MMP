#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能(表現プロセス)のアクションメソッド
#┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃ペダルの踏むべき方向を立体物と画面で表現する
#┃・立体物：小屋の『恐竜の首(サーボ）』を制御
#┃・画　面：足跡の画像で表示
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import sys; sys.path.append('..'); import 共通.MMP
from   ...データセット             import データセット as DS
from   ...                         import 共通部品

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):   #① 個体オブジェクト
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_個体.仕様
        self._情報 = 引数_個体.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│プロセス機能を実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●足踏みの方向指示を表現する
        self.Fn方向指示()
        #┴

	#────────────────────────────────────
    # ペダルの方向指示
	#────────────────────────────────────
    def Fn方向指示(self):
        #┬
        #●立体物で表現する
        self.Fn方向指示_立体()
        #│
        #●画面で表現する
        self.Fn方向指示_画面()
        #┴
	#────────────────────────────────────
    def Fn方向指示_立体(self):
        #┬
        #◇┐発電機の角度に応じて、方向指示を表現する
        チーム   = self._仕様.チームNo
        角度     = DS.obj.発電機[チーム].情報.角度
        左右判定 = 共通部品.発電機.右足判定(角度)
        if 左右判定:
        #　├┐（左脚の場合）
            #↓
            #●左脚を指示する
            共通.MMP.接続.PWM_VALUE(
                DS.仕様.小屋.首[チーム]   ,
                DS.仕様.小屋.最大         )
        else       :
        #　└┐（その他）
            #↓
            #●右脚を指示する
            共通.MMP.接続.PWM_VALUE(
                DS.仕様.小屋.首[チーム]   ,
                DS.仕様.小屋.最小         )
        #┴ ┴
	#────────────────────────────────────
    def Fn方向指示_画面(self):
        #┬
        #◇┐発電機の角度に応じて、方向指示を表現する
        チーム   = self._仕様.チームNo
        角度     = self._情報.角度
        左右判定 = 共通部品.発電機.右足判定(角度)
        if 左右判定: pyxel.blt(25+70*チーム,25+55*チーム, 0, 80,0, 24,56, 0)
        else       : pyxel.blt( 2+70*チーム,25+55*チーム, 0, 56,0, 24,56, 0)
        #　├┐（フレーム処理タイミングの場合）
            #↓
            #○左脚を指示する
        #　└┐（その他）
            #↓
            #○右脚を指示する
        #┴　┴
