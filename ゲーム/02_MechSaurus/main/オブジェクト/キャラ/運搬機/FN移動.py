#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃変更機能→移動プロセスのアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.GAME共通 as 共通処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
        #┬
        #○個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│運搬機の動力に電力を供給し駆動する
    #│・電力はＰＷＭ値で指定する
    #│・画面表示する電力と、実際に供給する電力は異なる場合がある
    #│　※最低出力の場合に動力を停止する為   
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○出力電力を求める
        最低出力 = self._仕様.最低出力
        最高出力 = self._仕様.最高出力
        変換効率 = self._仕様.変換効率
        出力電力 = min((最低出力 + self._情報.入力電力 * 変換効率), 最高出力)
         #│
        #○出力電力を確定する
        self._情報.出力電力 = 出力電力
        if 出力電力 == 最低出力: 出力電力 = -1
        #　 ＼（出力電力が『最低出力』の場合）
            #↓
            #○実際に出力する電力を『停止レベル』に補正する
            #┴
        #│
        #●動力に電力を供給する
        共通処理.入出力.MMP.PWM_VALUE(self._仕様.動力No, 出力電力)
        #│
        #○入力電力を減衰する（惰性を表現）
        self._情報.入力電力 = int(self._情報.入力電力 * 0.9)
        #┴