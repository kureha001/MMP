#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：発電機(移動プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from   main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):   #① 個体オブジェクト
        #┬
        #○個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●カモロボの姿勢を表現する
        self.Fn姿勢()
        #│
        #●命中数を表現する
        self.Fn命中数()
        #┴

    #┌───────────────────────────────────
    #│カモロボの姿勢
    #└───────────────────────────────────
    def Fn姿勢(self):
        #┬
        #◎└┐カモロボの姿勢を表現する
        for チーム in range(2):
            #│＼（すべてのチームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●姿勢を表現する（立体物）
            #●姿勢を表現する（画面）
            self.Fn姿勢_立体(チーム)
            self.Fn姿勢_画面(チーム)
        #┴　┴
	#────────────────────────────────────
    def Fn姿勢_立体(self, チーム):
        pass
	#────────────────────────────────────
    def Fn姿勢_画面(self, チーム):
        #┬
        #○背景を表示する
        中心位置 = (42) if self._仕様.所有者 ==1 else (136)
        self.Fn姿勢_画面_背景(中心位置,65)
        #│
        #○状態を確認する
        if self._情報.命中タイマ <= 0: return
        #│＼（フレーム処理タイミングではないの場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○命中タイマーを更新する
        self._情報.命中タイマ -= 1
        #│
        #◇┐撃たれたカモロボを描画する
        if self._仕様.所有者 == 1: pyxel.blt( 2,25, 0,  0,0,  79,79, 0)
        else                     : pyxel.blt(98,25, 0, 80,0, 159,79, 0)
        #┴
	#────────────────────────────────────
    def Fn姿勢_画面_背景(self,cx, cy):
        #┬
        radius = 40     # 外円の半径
        color_main = 7  # メインの色（白）
        color_aux = 5   # 補助線の色（グレー）
        #│
        #○外円を描く
        pyxel.circb(cx, cy, radius, color_main)
        #│
        #○クロスラインを描く
        pyxel.line(cx - radius, cy, cx + radius, cy, color_main)  # 横線
        pyxel.line(cx, cy - radius, cx, cy + radius, color_main)  # 縦線
        #│
        #○中心の点を描く
        pyxel.circ(cx, cy, 2, color_main)
        #│
        #○補助目盛（円形の目印）を描く
        for r in range(10, radius, 10):  # 半径10, 20, 30
            pyxel.circb(cx, cy, r, color_aux)
        #│
        #○補助目盛（斜めライン）を描く
        for dx, dy in [(-10, -10), (10, -10), (-10, 10), (10, 10)]:
            pyxel.line(cx + dx, cy + dy, cx + dx//2, cy + dy//2, color_main)
        #┴

    #┌───────────────────────────────────
    #│命中数
    #└───────────────────────────────────
    def Fn命中数(self):
        #┬
        #◎└┐発電機のサイクルを表現する
        for チーム in range(2):
            #│＼（すべてのチームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●命中数を表現する（立体物）
            #●命中数を表現する（画面）
            self.Fn命中数_立体(チーム)
            self.Fn命中数_画面(チーム)
        #┴　┴
	#────────────────────────────────────
    def Fn命中数_立体(self, チーム):
        pass
	#────────────────────────────────────
    def Fn命中数_画面(self, チーム):
        #┬
        #●命中数を表示する
        回数 = DS.obj.カモロボ[チーム].情報.命中回数
        位置   = (35) if チーム == 0 else (129)
        pyxel.text(位置, 2, str(回数).zfill(4), 7)
        #┴
