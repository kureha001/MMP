#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能(表現プロセス)のアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import sys; sys.path.append('..'); import 共通.MMP
from   main.データセット             import DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:

    #□ 雄たけび要否：『勝利チームの雄たけび』要否を判定
    雄たけび要否 = False

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン：終了画面(描画機能)
#┠─────────────────────────────────────
#┃描画コントローラが描画プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│プロセス機能を実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●画面で表現する
        self.Fn画面()
        #│
        #●物理体で表現する
        self.Fn物理体()
        #┴

    #┌───────────────────────────────────
    #│画面で表現
    #└───────────────────────────────────
    def Fn画面(self):
        #┬
        #○終了メッセージを表示する
        文字 = "- TIME UP -"
        pyxel.text(40, 79, 文字, 5)
        pyxel.text(39, 78, 文字, pyxel.frame_count % 16)
        #┴

    #┌───────────────────────────────────
    #│物理体で表現
    #└───────────────────────────────────
    def Fn物理体(self):
        #┬
        #○物理体表現のタイミングを調べる
        if pyxel.frame_count % 15 != 0: return
        #│ ＼（タイミングではない場合）
        #│  ↓
        #│  ▼処理を中断する
        #│
        #△┐勝利チーム(の恐竜)が雄たけびをあげる。
        if self.情報.雄たけび要否:
        #　├┐（『雄たけび』が『必要』の場合）
            #↓
            #●勝利チームの恐竜が雄たけびをあげる
            self.Fn物理体_雄たけび()
            #│
            #○次回は『雄たけび不要』を指定する。
            self.情報.雄たけび要否 = False
            #┴
        else:
        #　└┐（その他）
            #↓
            #●勝敗を恐竜で表現する
            self.Fn物理体_勝敗()
            #│
            #○次回は『雄たけび必要』を指定する。
            self.情報.雄たけび要否 = True 
        #┴　┴
	#────────────────────────────────────
    def Fn物理体_雄たけび(self):
        #┬
        #△┐勝利チームの恐竜が雄たけびをあげる
        救出数1 = DS.obj.運搬機[0].情報.救出数
        救出数2 = DS.obj.運搬機[1].情報.救出数
        if 救出数1 > 救出数2:
        #　├┐（チーム１が勝利の場合）
            #↓
            #●恐竜の首を震わす
            共通.MMP.接続.PWM_VALUE(
                DS.仕様.ジオラマ.恐竜[0]      ,
                DS.仕様.ジオラマ.中央[0] - 10 )
            #┴

        elif 救出数1 < 救出数2:
        #　└┐（その他）
            #↓
            #●恐竜の首を震わす
            共通.MMP.接続.PWM_VALUE(
                DS.仕様.ジオラマ.恐竜[1]      ,
                DS.仕様.ジオラマ.中央[1] + 10 )
            #┴
        #　└┐（その他）
            #┴
	#────────────────────────────────────
    def Fn物理体_勝敗(self):
        #┬
        #△┐中央からの移動量を求める
        救出数1 = DS.obj.運搬機[0].情報.救出数
        救出数2 = DS.obj.運搬機[1].情報.救出数
        if   救出数1 > 救出数2: 移動量 = -65
        elif 救出数1 < 救出数2: 移動量 = +65
        else                  : 移動量 =   0
        #　├┐（チーム１が勝利の場合）
            #↓
            #○『逆転方向』で用意する。
            #┴
        #　├┐（チーム２が勝利の場合）
            #↓
            #○『正転方向』で用意する。
            #┴
        #　└┐（その他）
            #↓
            #○『中央位置』で用意する。
            #┴
        #│
        #◎└┐用意した移動量でサーボ(恐竜)を動かす
        for サーボ in range(2):
            #│＼（両チームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●勝利チームの恐竜は頭を上げ、敗北チームは下げる。
            共通.MMP.接続.PWM_VALUE(
                DS.仕様.ジオラマ.恐竜[サーボ]          ,
                DS.仕様.ジオラマ.中央[サーボ] + 移動量 )
        #┴　┴