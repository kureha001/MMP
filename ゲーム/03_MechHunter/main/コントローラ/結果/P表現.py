#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能(表現プロセス)のアクションメソッドを実行
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from   main.データセット import DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│プロセスを実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●オブジェクト別で表現する
        self.Fnオブジェクト別()
        #│
        #●シーン別で表現する
        DS.obj.シーン[DS.情報.シーン].FN表現.実行()
        #│
        #●機能横断の表現
        self.Fn機能横断()
        #┴

	#────────────────────────────────────
    # オブジェクト別で表現
	#────────────────────────────────────
    def Fnオブジェクト別(self):
        #┬
        #○コンテナを確認する
        if len(DS.obj.カモロボ) == 0: return
        #│＼（コンテナが空の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎└┐オブジェクトで表現する
        for カモロボ in DS.obj.カモロボ: カモロボ.FN表現.実行()
            #│＼（全チームを走査した場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #●カモロボで表現する
        #┴

    #┌───────────────────────────────────
    #│機能横断の表現
    #└───────────────────────────────────
    def Fn機能横断(self):
        #┬
        #●プレイ時間を表示する
        self.Fnプレイ時間()
        #│
        #●得点を表示する
        self.Fn得点()
        #┴

	#────────────────────────────────────
    # プレイ時間を表示
	#────────────────────────────────────
    def Fnプレイ時間(self):
        self.Fnプレイ時間_物理体()
        self.Fnプレイ時間_画面()
	#────────────────────────────────────
    def Fnプレイ時間_物理体(self):
        pass
	#────────────────────────────────────
    def Fnプレイ時間_画面(self):
        #┬
        #○プレイ時間を表示する
        出力 = DS.情報.プレイ時間
        pyxel.text(81,1, f"{str(出力).zfill(4)}", 10)
        #┴

	#────────────────────────────────────
    # 得点を表示
	#────────────────────────────────────
    def Fn得点(self):
        #┬
        #◎└┐得点を表現する
        for チームNo in range(2):
            #│＼（すべてのチームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●得点を表現する（物理体）
            #●得点を表現する（画面）
            self.Fn得点_物理体(チームNo)
            self.Fn得点_画面(チームNo)
        #┴　┴
	#────────────────────────────────────
    def Fn得点_物理体(self, チームNo):
        pass
	#────────────────────────────────────
    def Fn得点_画面(self, チームNo):
        #┬
        #●命中数を表示する
        得点 = DS.情報.得点[チームNo]
        位置 = (35) if チームNo == 0 else (129)
        pyxel.text(位置, 1, str(得点).zfill(4), 7)
        #┴