#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：タイトル画面(移動機能)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  main.GAME共通                   as 共通処理
from    main.データセット               import データセット as DS
from    main.オブジェクト.管理.特殊効果 import 特殊効果生成
from    main.オブジェクト.キャラ.自機   import 自機生成,自機共通生成
from    ..DB                            import シーンID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    #--------------------------------------------------------------------
    # カウンタ
    #--------------------------------------------------------------------
    #□持続時間  ：終了画面を持続する長さ（単位：fps）
    持続時間    = 20

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:
    #--------------------------------------------------------------------
    # カウンタ
    #--------------------------------------------------------------------
    #□開始時間  ：終了画面を持続するカウンタ
    開始時間    = 0


#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self.仕様  = 仕様クラス()
        self.情報  = 情報クラス()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○選択状況を確認する
        if (DS.情報.人数 > 0) and (DS.情報.操作手段 is not None)  and not((DS.情報.人数 == 3) and (DS.情報.操作手段 != 2)):
        #　 ＼（選択済み場合）
            #↓
            #●次のシーン『プレイ画面』に進行する
            self.Fn次シーン準備()
            #┴
        #│
        #●プレイヤー人数を選択する
        self.実行_人数選択()
        #│
        #●操作方法を選択する
        self.実行_操作方法選択()
        #│
        #●MMPをキャリブレーションする
        self.実行_MMP調整()
        #┴
	#────────────────────────────────────
    def 実行_人数選択(self):
        #┬
        #◇┐プレイヤー数を決める
        if pyxel.btnr(pyxel.KEY_1):
        #　├┐（「１」キー入力した場合）
            #↓
            #○プレイヤー人数を１名でセットする
            DS.情報.人数 = 1
            共通処理.効果音.アイテム取得()
            #┴
        elif pyxel.btnr(pyxel.KEY_2):
        #　├┐（「２」キー入力した場合）
            #↓
            #○プレイヤー人数を2名でセットする
            DS.情報.人数 = 2
            共通処理.効果音.アイテム取得()
            #┴
        elif pyxel.btnr(pyxel.KEY_3):
        #　├┐（「３」キー入力した場合）
            #↓
            #○プレイヤー人数を2名でセットする
            DS.情報.人数 = 3
            共通処理.効果音.アイテム取得()
            #┴
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────
    def 実行_操作方法選択(self):
        #┬
        #◇┐プレイヤー数を決める
        if pyxel.btnr(pyxel.KEY_K):
        #　├┐（「Ｋ」キー入力した場合）
            #↓
            #○キーボード操作でセットする
            DS.情報.操作手段 = 0
            共通処理.効果音.アイテム取得()
            #┴
        if pyxel.btnr(pyxel.KEY_J):
        #　├┐（「Ｊ」キー入力した場合）
            #↓
            #○ジョイパッド操作でセットする
            DS.情報.操作手段 = 1
            共通処理.効果音.アイテム取得()
            #┴
        if pyxel.btnr(pyxel.KEY_M):
        #　├┐（「Ｍ」キー入力した場合）
            #↓
            #○ＭＭＰ操作でセットする
            DS.情報.操作手段 = 2
            共通処理.効果音.アイテム取得()
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────
    def 実行_MMP調整(self):
        #┬
        if pyxel.btnr(pyxel.KEY_UP):
            DS.情報.MMP中央値 += 5
            if DS.情報.MMP中央値 > 1020 : DS.情報.MMP中央値 = 0
            共通処理.効果音.アイテム取得()
        #│
        if pyxel.btnr(pyxel.KEY_DOWN):
            DS.情報.MMP中央値 -= 5
            if DS.情報.MMP中央値 < 0    : DS.情報.MMP中央値 = 1020
            共通処理.効果音.アイテム取得()
        #│
        if pyxel.btnr(pyxel.KEY_LEFT):
            DS.情報.MMP反応率 -= 1
            if DS.情報.MMP反応率 < 1    : DS.情報.MMP反応率 = 20
            共通処理.効果音.アイテム取得()
        #│
        if pyxel.btnr(pyxel.KEY_RIGHT):
            DS.情報.MMP反応率 += 1
            if DS.情報.MMP反応率 > 20   : DS.情報.MMP反応率 = 0
            共通処理.効果音.アイテム取得()
        #┴

    #┌───────────────────────────────────
    #│次シーンの前準備
    #└───────────────────────────────────
    def Fn次シーン準備(self):
        #┬
        #◇┐終了画面を開始する
        if self.情報.開始時間 == 0:
        #　├┐（待ちを開始する場合）
            #↓
            #●取得音止める
            pyxel.stop()
            #│
            #○持続カウントを開始する
            self.情報.開始時間   = pyxel.frame_count
            #┴
        #　└┐（その他）
            #┴
        #│
        #●取得音を鳴らす
        if pyxel.frame_count % 5 == 0: 共通処理.効果音.アイテム取得()
        #│
        #◇┐次のシーンに進行する
        経過時間 = pyxel.frame_count - self.情報.開始時間
        時間あり = (経過時間 < self.仕様.持続時間)
        if 時間あり: return
        #│＼（まだ時間がある場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○ゲーム情報をリセットする
        DS.情報.得点        = 0
        DS.情報.プレイ時間  = 1
        DS.情報.難易度      = 1
        #│
        #●自機共通の情報オブジェクトを生成する
        #●特殊効果オブジェクトを生成する ※自機共通を参照するの為この順序で
        DS.obj.自機共通 = 自機共通生成()
        DS.obj.特殊効果 = 特殊効果生成()        
        #│
        #◎└┐人数分の自機を登場する
        位置間隔 = int(DS.仕様.基本.画面幅 / (DS.情報.人数 + 1))
        for tmpNo in range(DS.情報.人数):
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #○画面横位置を等間隔に登場する
            自機生成( tmpNo, 位置間隔 * (tmpNo + 1), 140)
            #┴
        #│
        #〇MMPを初期化する
#        if DS.情報.操作手段 == 2: 共通処理.操作手段.MMP_初期化()
        #│
        #○シーンを『プレイ画面』に進行する
        #●BGMを鳴らす
        DS.情報.シーン = シーンID.プレイ画面
        共通処理.BGM_DFP.指定曲ザコ()
        #┴