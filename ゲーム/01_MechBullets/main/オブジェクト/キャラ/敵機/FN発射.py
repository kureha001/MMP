#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：敵機(発射プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが発射プロセスで実行するアクション・メソッド
#┃・下位にデータセット･クラス(仕様)を持つ
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    main.データセット   import データセット as DS
from    ..弾                import 弾生成

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self   ,
            引数_仕様   ):  #① 個体の仕様
        #┬
        #○DBの検索IDを用意する  
        self.間隔 = 引数_仕様.DB[ 引数_仕様.検索ID ][2][0]
        self.速度 = 引数_仕様.DB[ 引数_仕様.検索ID ][2][1]
        self.弾数 = 引数_仕様.DB[ 引数_仕様.検索ID ][2][2]
        self.角度 = 引数_仕様.DB[ 引数_仕様.検索ID ][2][3]
        self.威力 = 引数_仕様.DB[ 引数_仕様.検索ID ][3][0]
        if self.威力 < 0:
            self.威力 = -self.威力
            self.貫通弾 = True
        else:
            self.貫通弾 = False
        #┴　┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._上位 = 引数_上位
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self._仕様)
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◇┐ボスの狙い撃ちを発射する
        発射間隔 = max(17 - int(DS.情報.難易度/2), 10)
        if self._仕様.ボス区分 and not self.Fn発射禁止( 発射間隔 ):
        #　├┐（ボスで発射タイミングの場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        #　└┐（その他）
            #┴
        #│
        #●発射できるか確認する
        if self.Fn発射禁止( self.仕様.間隔 ): return
        #│＼（敵機が『弾を発射しない』タイプの場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐仕様に従い発射する  
        if self.仕様.弾数 == 1:
        #　├┐（タイプが『１発・狙い撃ち』の場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        else:
        #　└┐（その他）
            #↓
            #●複数発で発射する  
            self.Fn発射_複数発()
        #┴　┴

    #┌───────────────────────────────────
    #│発射可否確認
    #└───────────────────────────────────
    def Fn発射禁止(self ,
            引数_間隔   ):  #① 発射間隔
                            #【戻り値】 True:不許可／False：許可
        #┬
        #○仕様を確認する
        if (self.仕様.弾数 * 引数_間隔 * self.仕様.速度) == 0: return True
        #│＼（『弾を発射しない』タイプの場合）
        #│ ↓
        #│ ▼『発射不可能』を返す
        #│
        #○発射タイミングを確認する
        if self._情報.経過時間 % 引数_間隔 != 0: return True
        #│＼（発射タイミングではない場合）
        #│ ↓
        #│ ▼『発射不可能』を返す
        #│
        #▼『発射可能』を返す
        return False

    #┌───────────────────────────────────
    #│自機に向けて1発ずつ発射
    #└───────────────────────────────────
    def Fn発射_単発(self):
        #┬
        #○時期の状況を確認する
        if not DS.obj.自機: return
        #│＼（自機が『存在しない』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        所有者 = DS.仕様.所有者ID.敵機
        d = (DS.仕様.キャラ幅.ボス - DS.仕様.キャラ幅.通常) if self._仕様.ボス区分 else (0)
        d = d // 2
        x1 = self._情報.X + d
        y1 = self._情報.Y + d
        #│
        自機ID = pyxel.rndi(0,len(DS.obj.自機)-1)
        x2 = DS.obj.自機[自機ID].情報.X
        y2 = DS.obj.自機[自機ID].情報.Y
        発射角度 = pyxel.atan2((y2 - y1), (x2 - x1))
        #│
        #●弾を生成する
        弾生成(
                所有者          ,
                x1, y1          ,
                発射角度        ,
                self.仕様.速度  ,
                self.仕様.威力  ,          
                self.仕様.貫通弾)
        #┴

    #┌───────────────────────────────────
    #│機体の同心円上を特定の角度で複数発を同時発射
    #└───────────────────────────────────
    def Fn発射_複数発(self):
        #┬
        #○基本情報を用意する
        d = (DS.仕様.キャラ幅.ボス - DS.仕様.キャラ幅.通常) if self._仕様.ボス区分 else (0)
        d = d // 2
        x1 = self._情報.X + d
        y1 = self._情報.Y + d
        分割角度 = 360 / self.仕様.弾数
        #│
        #◎└┐多方向に発射する
        for tmp弾数 in range(self.仕様.弾数):
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●発射角度を求める
            発射角度 = tmp弾数 * 分割角度 - self.仕様.角度
            #│
            #≫弾を生成する
            所有者 = DS.仕様.所有者ID.敵機
            弾生成(
                    所有者          ,
                    x1, y1          ,
                    発射角度        ,
                    self.仕様.速度  ,
                    self.仕様.威力  ,          
                    self.仕様.貫通弾)
        #┴　┴