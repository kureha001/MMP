#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃共通処理
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import sys; sys.path.append('..'); import 共通.MMP
from .データセット import DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃ＭＭＰデバイス(発電機)
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 発電機():
	#────────────────────────────────────
    def 右足判定(引数_角度):
		#┬
        #▼右足を踏むタイミグか否かを返す
        return (True) if 引数_角度 <= 180 else False

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃ＭＭＰデバイス(運搬機)
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 運搬機():
	#────────────────────────────────────
    def 停止():
		#┬
        #○運搬機を確認する
        if len(DS.obj.運搬機) == 0: return
        #│＼（運搬機を走査し終えた場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●運搬機の全機能を停止する
        運搬機.電飾制御(False)
        運搬機.モータ停止()
        #┴
	#────────────────────────────────────
    def 電飾制御(引数_活性可否): #① True:活性化／False:非活性化
		#┬
        #○引数に応じてPWM値を設定する
        PWM値 = (4095) if 引数_活性可否 else (-1)
        #│
        #≫運搬機の電飾を活性制御する
        共通.MMP.接続.PWM_VALUE(DS.obj.運搬機[0].仕様.電飾No, PWM値)
        共通.MMP.接続.PWM_VALUE(DS.obj.運搬機[1].仕様.電飾No, PWM値)
        #┴
	#────────────────────────────────────
    def モータ停止():
		#┬
        #≫運搬機の動力(モータ)を停止する
        共通.MMP.接続.PWM_VALUE(DS.obj.運搬機[0].仕様.動力No, -1)
        共通.MMP.接続.PWM_VALUE(DS.obj.運搬機[1].仕様.動力No, -1)
        #┴
