#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃変更機能(動作プロセス)のアクションメソッドを実行
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import sys; sys.path.append('..'); import 共通.音声
from   ...データセット             import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:

    #□得点
    ボーナス条件 = 3500 # この出力以上でボーナス条件を満たす
    加点         = 20   # ボーナス条件を満たした際の加点

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│プロセスを実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●オブジェクトの動作を変更する
        self.Fnオブジェクトの動作()
        #│
        #●シーンの動作を変更する
        DS.obj.シーン[DS.情報.シーン].FN動作.実行()
        #┴ 

    #┌───────────────────────────────────
    #│オブジェクトのプロセスを実行
    #└───────────────────────────────────
    def Fnオブジェクトの動作(self):
        #┬
        #○シーンを確認する
        if DS.情報.シーン != DS.仕様.シーンID.プレイ画面: return
        #│＼（シーンがプレイ画面以外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎└┐キャラクタ(発電機・運搬機)を動作する
        for チームNo in range(2):
            #│＼（すべてのチームを走査した場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #○オブジェクトをリファレンスを用意する
            発電機 = DS.obj.発電機[チームNo]
            運搬機 = DS.obj.運搬機[チームNo]
            #│
            #≫発電機を動作する
            発電機.FN動作.実行()
            #│
            #◇┐運搬機を動作する
            if DS.情報.プレイ時間 % 30 == 0:
            #　├┐（プレイ時間が電力供給タイミングの場合）
                #↓
                #○運搬機に電力を送電する
                電力 = 発電機.情報.蓄電量
                電力 = int(電力 / DS.情報.人数)
                発電機.情報.蓄電量    = 0
                運搬機.情報.入力電力 += 電力
                #│
                #≫運搬機を動作する
                運搬機.FN動作.実行()
                #│
                #◇┐ボーナス点を取得する
                if 運搬機.情報.出力電力 > self.仕様.ボーナス条件:
                #　├┐（ボーナス条件を満たした場合）
                    #↓
                    #●クリック音を鳴らす
                    共通.音声.クリック音()
                    #│
                    #○得点にボーナス点を加算する
                    DS.情報.得点[チームNo] += self.仕様.加点
                    #┴
                #　└┐（その他）
                    #┴
            #　│
            if DS.情報.プレイ時間 % 5 == 0:
            #　├┐（プレイ時間が動作タイミングの場合）
                #↓
                #≫運搬機を動作する
                運搬機.FN動作.実行()
                #┴
            #　└┐（その他）
        #┴　┴　┴