#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃変更機能(発射プロセス)のアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# [システム共通]
import pyxel

# [ゲーム共通]
import main.共通部品 as 共通部品
from   main.データセット               import DS

# [別クラス]
from   main.オブジェクト.管理.特殊効果 import 効果ID
from   main.オブジェクト.キャラ.弾     import 弾生成

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    def __init__(self):
        #--------------------------------------------------------------------
        # カウンタ
        #--------------------------------------------------------------------
        #□ 経過時間     ： 次の発射までの待ち時間(単位:fps)
        self.発射制限   = 0

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._上位 = 引数_上位
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #○外部オブジェクトのリファレンスを用意する
        self.共仕   = DS.obj.自機共通.仕様
        self.共情   = DS.obj.自機共通.情報
        self.特情   = DS.obj.特殊効果.情報
        #│
        #≫データセットを用意する
        self.情報   = 情報()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◇┐弾を補充する
        if pyxel.frame_count % self.共仕.補充間隔 == 0:
        #　├┐（補充タイミングの場合）
            #↓
            #○積載量を超えない範囲で補充する
            self.共情.弾数 = min( self.共情.弾数 + 1,self.共仕.積載量 )
        #　└┐（その他）
            #┴
        #│
        #●発射可否を確認する
        if self.Fn可否確認(): return
        #│＼（『発射不可』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●発射する
        self.Fn発射()
        #│
        #○発射可能までの時間をリセットする
        self.情報.発射制限 = self.共仕.発射間隔
        #│
        #○弾を減らす
        if DS.情報.チート.消えない: return
        self.共情.弾数 -= (1) if DS.情報.人数 == 0 else (0.85)
        #┴

    #┌───────────────────────────────────
    #│発射可否確認
    #└───────────────────────────────────
    def Fn可否確認(self): #【戻り値】 True:不許可／False：許可
        #┬
        #●発射指力操作.走示を確認する
        操作 = 共通部品.入出力
        結果 = 操作.入力走査(操作.ID_発射, self._仕様.番号)
        発射法 = (1) if 効果ID.連射 in self.特情.発動中 else (-1)
        if 結果[1][3] != 発射法: return True
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○発射制限時間を縮める
        self.情報.発射制限 = max(self.情報.発射制限 - 1, 0)
        if  発射法 == 1 and self.情報.発射制限 > 0: return True
        #│＼（まだ発射制限時間がある場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○弾切れを確認する
        if self.共情.弾数 <= 0: return True
        #│＼（弾切れの場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #▼発射『可能』で返す
        return False
        #┴

    #┌───────────────────────────────────
    #│発射数を求めて発射指示
    #└───────────────────────────────────
    def Fn発射(self):
        #┬
        #○基本情報を用意する
        所有者      = DS.仕様.所有者ID.自機
        x           = self._情報.X 
        y           = self._情報.Y
        威力        = self.共仕.威力_弾
        chk貫通弾   = (効果ID.貫通弾 in self.特情.発動中)
        #│
        #○発射数を求める
        発動中      = self.特情.発動中
        キー        = 効果ID.発射数 
        発射数      = (発動中[キー][1] + 1) if キー in 発動中 else (1)
        #│
        #●発射角度を求める
        拡散角度    = 5
        基本角度    = -90 + (拡散角度 * (発射数 - 1) / 2 )
        #│
        #◎└┐角度を求めながら発射する
        for tmp弾数 in range(発射数):
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●発射角度を少しずらす
            発射角度 = 基本角度 - (拡散角度 * tmp弾数)
            #│
            #≫弾を生成する
            弾生成( 所有者, x, y, 発射角度, 5, 威力, chk貫通弾 )
            #┴