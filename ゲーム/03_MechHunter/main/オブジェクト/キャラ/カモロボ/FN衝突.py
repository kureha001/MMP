#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：カモロボ(移動プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが衝突プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.GAME共通 as 共通処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 衝突クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):   #① 個体オブジェクト
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◎└┐命中判定
        for 各ポート in self._仕様.ポート一覧:
            #│＼（全ペダルを走査した場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #●カモロボの状況を用意する
            結果 = 共通処理.入出力.入力走査(各ポート)
            #│
            #○命中回数を更新する
            if not 結果[0][0] and self._情報.反応回数 == 0:
            #　 ＼（ONで最初の反応の場合）
                #↓
                #○命中回数を1つ増やす
                self._情報.命中回数 += 1
            #│
            #○リアクション状態を確認する
            if not 結果[1][0]: return
            #│＼（ON→OFFではない場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #○反応回数を更新する
            self._情報.反応回数 += 1
            if self._情報.反応回数 >= self._仕様.反応回数:
            #　 ＼（ONで最初の反応の場合）
                #↓
                #○命中回数をリセットする
                self._情報.命中回数 = 0
