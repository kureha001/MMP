#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：タイトル画面(移動機能)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import time
import main.GAME共通                                       as 共通処理
from   main.データセット               import データセット as DS
from   main.オブジェクト.キャラ.発電機 import 発電機生成
from   main.オブジェクト.キャラ.運搬機 import 運搬機生成
from   ..DB                            import シーンID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    #□人数選択一覧：人数選択におけるキーと人数の対応表
    人数選択一覧  = {
        pyxel.KEY_1: 1,     # 1人同士の対戦プレイ(合計2名)
        pyxel.KEY_2: 2,     # 2人同士の対戦プレイ(合計4名)
        pyxel.KEY_3: 3,     # 3人同士の対戦プレイ(合計6名)
        pyxel.KEY_4: 4      # 4人同士の対戦プレイ(合計8名)
        }

    砂時計 = 12    #ジオラマの砂時計のサーボモータ
    砂時計_最小   = 142 #110～
    砂時計_最大   = 626 #～660

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    砂時計向き = True # 砂時計の向き(True:上向き, False:下向き)

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        #┬
        #W〇個体オブジェクトのリファレンスを用意する
        self.仕様  = 仕様クラス()
        self.情報  = 情報クラス()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬ 
        #●人数を選択する
        self.Fn人数選択()
        if DS.情報.人数 == 0: return
        #│＼（未選択の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●各種オブジェクトを生成する
        self.Fnオブジェクト生成()
        #│
        #●画面遷移をセットする
        self.Fn画面遷移()
        #┴
	#────────────────────────────────────
    def Fn人数選択(self):
        #┬ 
        #◇┐発電した電気を運搬機に供給する
        if DS.情報.人数 == 0:
        #　├┐（フレーム処理タイミングの場合）
            #↓
            #○人数の一覧を用意する
            人数一覧 = self.仕様.人数選択一覧.keys()
            #│
            #◎└┐対戦人数を設定する
            for 人数 in 人数一覧:
                #◇┐有効な対戦人数で設定する
                if pyxel.btnr(人数) and 人数 in self.仕様.人数選択一覧:
                #　├┐（人数とキーが一致する場合）
                    #↓
                    #○対戦人数を設定する
                    DS.情報.人数 = self.仕様.人数選択一覧[人数]
                #　└┐（その他）
            #┴　┴　┴
        #　└┐（その他）
        #┴　┴
	#─────────────────────────────────────
    def Fnオブジェクト生成(self):
        #┬ 
        #●各チームの運搬機オブジェクトを生成する
        運搬機生成(9,(2,3))
        運搬機生成(8,(0,1))
        #│
        #○各チームのペダル一覧(MMPポート番号)を設定する
        チーム2 = list(range(DS.情報.人数, (DS.情報.人数 + DS.情報.人数)))
        チーム1 = list(range(DS.情報.人数))
        #│
        #●各チームの発電機オブジェクトを生成する
        発電機生成(チーム2)
        発電機生成(チーム1)
        #┴
	#────────────────────────────────────
    def Fn画面遷移(self):
        #┬ 
        #○ゲーム情報をリセットする
        #○シーンを『プレイ画面』に進行する
        DS.情報.プレイ時間 = DS.仕様.プレイ時間
        DS.情報.シーン     = シーンID.プレイ画面
        #│
        #●BGMを開始する ※ True:MP3 / False:内臓モジュール
        self.FnBGM開始(True)
        #│
        #●砂時計をターンする
        self.Fn砂時計(True)
        #┴
	#────────────────────────────────────
    def FnBGM開始(self, 引数_BGM選択):
        #┬ 
        #◇┐BGMを開始する
        if 引数_BGM選択:
        #　├┐（MP3を演奏する場合）
            #↓
            #●恐竜の鳴き声を鳴らす
            共通処理.BGM_DFP.指定曲(1)  # 恐竜の鳴き声
            time.sleep(2)
            #│
            #●BGMを切替える
            共通処理.BGM_DFP.自動選択() # ＢＧＭ
            time.sleep(3)
        else:
        #　└┐（その他）
            #↓
            #●MP3を止める
            共通処理.入出力.MMP.DFP_Stop(1)
            #│
            #●運搬機の電飾制御を起動する
            共通処理.運搬機.電飾制御(True)  
            time.sleep(7) 
        #┴　┴
	#────────────────────────────────────
    def Fn砂時計(self):
        #┬ 
        #◇┐砂時計を動かす
        if self.情報.砂時計向き:
        #　├┐（赤印が上の場合）
            #↓
            self.情報.砂時計向き = False
            開始 = self.仕様.砂時計_最小
            終了 = self.仕様.砂時計_最大
            増分 = 2
        else:
        #　└┐（その他）
            #↓
            #◇┐砂時計を動かす
            self.情報.砂時計向き = True
            開始 = self.仕様.砂時計_最大
            終了 = self.仕様.砂時計_最小
            増分 = -2
        #│
        #◎┐砂時計を動かす
        for val in range(開始, 終了, 増分):
            共通処理.入出力.MMP.PWM_VALUE(self.仕様.砂時計,val)
            time.sleep( 0.002)
        #┴
