#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能→表現プロセスのアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import sys; sys.path.append('..'); import 共通.MMP
from   ...データセット             import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        pass
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●運搬機の出力を表現する
        self.Fn出力メータ()
        #│
        #●運搬機の救出数を表現する
        self.Fn救出数()
        #┴

    #┌───────────────────────────────────
    #│出力メータ
    #└───────────────────────────────────
    def Fn出力メータ(self):
        #┬
        #◎└┐発電機のサイクルを表現する
        for チーム in range(2):
            #│＼（すべてのチームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #○運搬機の出力値を求める
            運搬機   = DS.obj.運搬機[チーム]
            出力     = 運搬機.情報.出力電力
            最低出力 = 運搬機.仕様.最低出力
            最高出力 = 運搬機.仕様.最高出力
            比率     = (出力-最低出力)/(最高出力-最低出力)
            #│
            #●運搬機の出力を表現する（立体物）
            #●運搬機の出力を表現する（画面）
            self.Fn出力メータ_立体(チーム, 比率)
            self.Fn出力メータ_画面(チーム, 比率, 出力)
        #┴　┴
	#────────────────────────────────────
    def Fn出力メータ_立体(self, チーム, 比率):
        #┬
        #●出力メータを表現する
        目盛 = DS.仕様.小屋.最大 - int(DS.仕様.小屋.範囲 * 比率)
        共通.MMP.接続.PWM_VALUE(DS.仕様.小屋.骨[チーム],目盛)
        #┴
	#────────────────────────────────────
    def Fn出力メータ_画面(self, チーム, 比率, 出力):
        #┬
        #●出力メータを表示する
        画面高 = DS.仕様.画面高
        目盛   = int(画面高 * 比率)
        開始   = 画面高 - 目盛
        位置   = (10) if チーム == 0 else (80)
        pyxel.rect(位置, 開始, 30, 目盛, 15)         # 矩形描画
        pyxel.text(位置+8, 画面高-10, str(出力), 8 ) # 数値表示
        #┴

    #┌───────────────────────────────────
    #│救出数
    #└───────────────────────────────────
    def Fn救出数(self):
        #┬
        #◎└┐発電機のサイクルを表現する
        for チーム in range(2):
            #│＼（すべてのチームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●運搬機の救出数を表現する（立体物）
            #●運搬機の救出数を表現する（画面）
            self.Fn救出数_立体(チーム)
            self.Fn救出数_画面(チーム)
        #┴　┴
	#────────────────────────────────────
    def Fn救出数_立体(self, チーム):
        #※立体物で救出数を表現する機能はない
        pass
	#────────────────────────────────────
    def Fn救出数_画面(self, チーム):
        #┬
        #●救出数を表示する
        回数 = DS.obj.運搬機[チーム].情報.救出数
        位置 = (18) if チーム == 0 else (88)
        pyxel.text(位置, 2, str(回数).zfill(4), 7)
        #┴