#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ画面(表現機能)
#┠─────────────────────────────────────
#┃結果コントローラが表現プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.GAME共通                         as 共通処理
from   main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 表現クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
        #┬
        #○個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        #┴
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○残り時間を画面表示する
        pyxel.text(54, 2, f"{str(DS.情報.プレイ時間).zfill(3)}", 10)
        #│
        #◎└┐発電機のサイクルを表現する
        for チーム in range(2):
            #│＼（すべてのチームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #○出力を求める
            運搬機   = DS.obj.運搬機[チーム]
            出力     = 運搬機.情報.出力電力
            最低出力 = 運搬機.仕様.最低出力
            最高出力 = 運搬機.仕様.最高出力
            比率     = (出力-最低出力)/(最高出力-最低出力)
            #│
            #○方向指示・出力を表現する
            self.Fn表現_立体(チーム, 比率)
            #self.Fn表現_画面(チーム, 比率, 出力)
        #┴　┴
	#────────────────────────────────────
    def Fn表現_立体(self, チーム, 比率 ):
        #┬
        #●出力を表現する
        目盛 = self._仕様.最大 - int(self._仕様.範囲 * 比率)
        共通処理.入出力.MMP.PWM_VALUE(self._仕様.骨[チーム],目盛)
        #│
        #◇┐方向指示を表現する
        角度     = DS.obj.発電機[チーム].情報.角度
        左右判定 = 共通処理.発電機.右足判定(角度)
        if 左右判定:
        #　├┐（左脚の場合）
            #↓
            #●左脚を指示する
            共通処理.入出力.MMP.PWM_VALUE(
                self._仕様.首[チーム]   ,
                self._仕様.最大         )
        else       :
        #　└┐（その他）
            #↓
            #●右脚を指示する
            共通処理.入出力.MMP.PWM_VALUE(
                self._仕様.首[チーム]   ,
                self._仕様.最小         )
    #┴　┴　┴
	#────────────────────────────────────
    def Fn表現_画面(self, チーム, 比率, 出力):
        #┬
        画面高   = DS.仕様.画面高
        #│
        #○出力を表現する
        目盛 = int(画面高 * 比率)
        開始 = 画面高 - 目盛
        pyxel.rect((10+70*チーム),開始, 30 , 目盛, 15)            # 矩形描画
        pyxel.text((10+8+70*チーム) , (画面高-10), str(出力), 8 ) # 数値表示
        #│
        #◇┐方向指示を表現する
        角度     = DS.obj.発電機[チーム].情報.角度
        左右判定 = 共通処理.発電機.右足判定(角度)
        if 左右判定: pyxel.blt(25+70*チーム,25+55*チーム, 0, 80,0, 24,56, 0)
        else       : pyxel.blt( 2+70*チーム,25+55*チーム, 0, 56,0, 24,56, 0)
        #　├┐（フレーム処理タイミングの場合）
            #↓
            #○左脚を指示する
        #　└┐（その他）
            #↓
            #○右脚を指示する
    #┴　┴　┴
