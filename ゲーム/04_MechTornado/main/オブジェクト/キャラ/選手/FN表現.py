#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能→表現プロセスのアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from   main.データセット import データセット as DS
import main.GAME共通                         as 共通処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):   #① 個体オブジェクト
        #┬
        #○個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●選手の姿勢を表現する
        self.Fn姿勢()
        #┴

    #┌───────────────────────────────────
    #│選手の姿勢
    #└───────────────────────────────────
    def Fn姿勢(self):
        #┬
        #●立体物で表現する
        self.Fn姿勢_立体()
        #│
        #●画面で表現する
        self.Fn姿勢_画面()
        #┴
	#────────────────────────────────────
    def Fn姿勢_立体(self):
        #┬
        #●屈伸の有無を表現する
        姿勢ID = self._仕様.屈伸
        装置No = DS.ハード.装置No_屈伸
        最大値 = DS.ハード.モータ最大
        最小値 = DS.ハード.モータ最小
        出力値 = (最大値) if self._情報.姿勢 == 姿勢ID else (最小値)
        共通処理.入出力.MMP.PWM_VALUE(装置No, 出力値)
        #│
        #●着地の有無を表現する
        姿勢ID = self._仕様.着地
        装置No = DS.ハード.装置No_着地
        最大値 = DS.ハード.サーボ最大
        最小値 = DS.ハード.サーボ最小
        出力値 = (最小値) if self._情報.姿勢 == 姿勢ID else (最大値)
        共通処理.入出力.MMP.PWM_VALUE(装置No, 出力値)
        #┴
	#────────────────────────────────────
    def Fn姿勢_画面(self):
        #┬
        #○屈伸の有無を表示する
        if self._情報.姿勢 == self._仕様.屈伸:
            pyxel.blt(60,20, 0, 24,0, 39,119, 0)
        else:
            pyxel.blt(80,20, 0,  0,0, 23,119, 0)
        #┴
