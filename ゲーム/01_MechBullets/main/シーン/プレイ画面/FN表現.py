#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ画面(描画機能)
#┠─────────────────────────────────────
#┃描画コントローラが描画プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# [システム共通]
import pyxel

# [ゲーム共通]
from ...データセット import データセット as DS

# [別クラス]
from ...オブジェクト.管理.特殊効果 import 効果ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│※自機が無い場合は表示不可 または 意味がない為、処理をスキップする
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○自機を確認する
        if not DS.obj.自機: return
        #│＼（自機が存在しない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●残りの物資を描画する
        self.Fn残り物資()
        #│
        #●ボス襲来の警告を表示する
        self.Fnボス襲来警告()
        #┴

    #┌───────────────────────────────────
    #│残り物資の描画
    #└───────────────────────────────────
    def Fn残り物資(self):
        #┬
        #○効果発動の登録状況を用意する
        発動中 = DS.obj.特殊効果.情報.発動中
        #│
        共通情報 = DS.obj.自機共通.情報
        #│
        #○残りのシールドを描画する
        数量 = int(共通情報.シールド)
        pyxel.rect(0, DS.仕様.画面高 - 12, 数量, 3, 7)
        #│
        #◎└┐残りの弾薬を描画する
        座標X   = 1
        座標Y   = DS.仕様.画面高 - 8
        画像X   = (4) if 効果ID.貫通弾 in 発動中 else (0)
        数量 = int(共通情報.弾数)
        for i in range(数量):
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #○ひとつずつ描画する
            pyxel.blt(座標X, 座標Y, 0, 画像X, 40, 4, 8, 0)
            座標X += 5
        #┴　┴

    #┌───────────────────────────────────
    #│ボス襲来の警告を表示する
    #└───────────────────────────────────
    def Fnボス襲来警告(self):
        #┬
        #◇┐ボス襲来の警告を表示する
        if DS.情報.ボスシーン == DS.仕様.シーンID.ボス警告 :
        #　├┐（ボス待ちの場合）
            #↓
            #○残りのシールドを描画する
            メッセージ = "Enemy aircraft encounter"
            pyxel.text(16, 41, メッセージ, 0)
            pyxel.text(15, 40, メッセージ, pyxel.rndi(1,15))
            #┴
        #　└┐（その他）
        #┴　┴