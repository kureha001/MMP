#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃変更機能(救出プロセス)のアクションメソッド
#┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃恐竜の山頂到達を検出する
#┃・救出数を加算
#┃・得点を加算
#┃・チャタリングを防止するため、スキャンのインターバルを設ける
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# [アプリ共通]
import MMP
import 音声

# [ゲーム共通]
from main.データセット import DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:

    #□センサー
    チャンネル一覧  = (0,1) # HC4069のANA-INチャンネルNoの一覧
    センサ閾値      = 200   # MMPのVcc(3.3V)を基準にしたセンサの閾値
    待ち時間        = 30    # チャタリング防止のインターバル(単位：フレーム)

    #□得点
    加点            = 100   # 救出した際の点数

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):

        #□ スキャン待ちタイマ (装置No.0用，装置No.1用)
        # 　チャタリング防止のインターバル(単位：フレーム)
        self.待ち時間 = [0,0]   

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│プロセス機能を実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◎└┐センサをスキャンする
        for 装置No in range(2):
            #│＼（全センサを走査し終えた場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #●スキャン可否を確認する
            if self.Fn可否確認(装置No): continue
            #│＼（『スキャン不許可』の場合）
            #│ ↓
            #│ ▼次のChを走査する
            #│
            #○センサ値を取得する
            チャンネルNo = self.仕様.チャンネル一覧[装置No]            
            センサ値     = MMP.接続.mmpAnaVal[self._仕様.ポートNo][チャンネルNo]
            通過判定     = センサ値 > self.仕様.センサ閾値
            if 通過判定: continue
            #│＼（『通過なし』の場合）
            #│ ↓
            #│ ▼次のChを走査する
            #│
            #●クリック音を鳴らす
            音声.ゲット音()
            #│
            #○救出数を加算する
            self._情報.救出数 += 1
            #│
            #○得点を加算する
            DS.情報.得点[self._仕様.チームNo] += self.仕様.加点
            #│
            #○スキャン待ちタイマをセットする
            self.情報.待ち時間[装置No] = self.仕様.待ち時間
            #┴

    #┌───────────────────────────────────
    #│スキャン可否確認
    #├───────────────────────────────────
    #│インターバル中はスキャン不可、それ以外はスキャン可能を返す
    #└───────────────────────────────────
    def Fn可否確認(self,引数_Ch): #【戻り値】 True:不許可／False：許可
        #┬
        #◇┐スキャン可否を判定する
        if self.情報.待ち時間[引数_Ch] > 0:
        #　├┐（スキャン待ち時間が残っている場合）
            #↓
            #○スキャン待ち時間をカウントダウンする
            #▼『スキャン不許可』を返す
            self.情報.待ち時間[引数_Ch] -= 1
            return True
        else:
        #　└┐（その他）
            #↓
            #▼『スキャン許可』を返す
            return False