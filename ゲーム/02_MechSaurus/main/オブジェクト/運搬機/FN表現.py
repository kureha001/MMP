#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能(表現プロセス)のアクションメソッド
#┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃出力を立体物と画面で表現する
#┃・立体物：小屋の『骨メータ(サーボ）』を制御
#┃・画　面：バーと数字の2通りで表示
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import sys; sys.path.append('..'); import 共通.MMP
from   ...データセット             import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│プロセス機能を実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●運搬機の出力を表現する
        self.Fn出力メータ()
        #┴

    #┌───────────────────────────────────
    #│出力メータ
    #└───────────────────────────────────
    def Fn出力メータ(self):
        #┬
        #○運搬機の出力値を求める
        チーム   = self._仕様.チームNo
        運搬機   = DS.obj.運搬機[チーム]
        出力     = 運搬機.情報.出力電力
        最低出力 = 運搬機.仕様.最低出力
        最高出力 = 運搬機.仕様.最高出力
        比率     = (出力-最低出力)/(最高出力-最低出力)
        #│
        #●運搬機の出力を表現する（立体物）
        self.Fn出力メータ_立体(チーム, 比率)
        #│
        #●運搬機の出力を表現する（画面）
        self.Fn出力メータ_画面(チーム, 比率, 出力)
        #┴
	#────────────────────────────────────
    def Fn出力メータ_立体(self, 引数_チーム, 引数_比率):
        #┬
        #●出力メータを『小屋の骨メータ(サーボモータ)』表現する
        目盛 = DS.仕様.小屋.最大 - int(DS.仕様.小屋.範囲 * 引数_比率)
        共通.MMP.接続.PWM_VALUE(DS.仕様.小屋.骨[引数_チーム],目盛)
        #┴
	#────────────────────────────────────
    def Fn出力メータ_画面(self, 引数_チーム, 引数_比率, 引数_出力):
        #┬
        #●出力メータを表示する
        画面高 = DS.仕様.画面高
        目盛   = int(画面高 * 引数_比率)
        開始   = 画面高 - 目盛
        位置   = (10) if 引数_チーム == 0 else (80)
        pyxel.rect(位置, 開始, 30, 目盛, 15)              # 矩形描画
        pyxel.text(位置+8, 画面高-10, str(引数_出力), 8 ) # 数値表示