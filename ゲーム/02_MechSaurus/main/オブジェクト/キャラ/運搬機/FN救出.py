#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：運搬機(救出プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┃・下位にデータセット･クラス(仕様)を持つ
#┃※画面外に移動した際、オブジェクトを削除する
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.GAME共通 as 共通処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):

        #□ スキャン待ちタイマー
        self.待ち時間 = [0,0]

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 救出クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_個体): #① 個体の仕様
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._個体  = 引数_個体
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #│
        #≫データセットを用意する
        self.情報   = 情報クラス()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●スキャンする
        ポートNo = self._仕様.ポートNo
        #│
        #●スキャンする
        for 装置No in range(2):
            #│
            #●スキャン可否を確認する
            if self.Fn可否確認(装置No): continue
            #│＼（『発射不可』の場合）
            #│ ↓
            #│ ▼次のChを走査する
            #│
            #○センサ値を確認する
            チャンネルNo = self._仕様.チャンネルNo[装置No]            
            センサ値     = 共通処理.入出力.MMP.mmpAnaVal[ポートNo][チャンネルNo]
            if センサ値 > self._仕様.センサ閾値: continue
            #│＼（『通過なし』の場合）
            #│ ↓
            #│ ▼次のChを走査する
            #│
            #●救出数を増やす
            self._情報.救出数 += 1
            #│
            #●スキャン待ちタイマーをセットする
            self.情報.待ち時間[装置No] = self._仕様.待ち時間
            #┴

    #┌───────────────────────────────────
    #│スキャン可否確認
    #└───────────────────────────────────
    def Fn可否確認(self,引数_Ch): #【戻り値】 True:不許可／False：許可
        #┬
        #◇┐仕様可否を判定する
        if self.情報.待ち時間[引数_Ch] > 0:
        #　├┐（スキャン待ち時間が残っている場合）
            #↓
            #○スキャン待ち時間をカウントダウンする
            #▼『不可能』を返す
            self.情報.待ち時間[引数_Ch] -= 1
            return True

        else:
        #　└┐（その他）
            #↓
            #▼『可能』を返す
            return False