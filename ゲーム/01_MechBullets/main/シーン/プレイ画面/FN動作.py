#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃変更機能(動作プロセス)のアクションメソッドを実行
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# [システム共通]
import pyxel

# [アプリ共通]
import sys; sys.path.append('..'); import 共通.音声

# [ゲーム共通]
import main.共通部品 as 共通部品
from main.データセット import DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:

    #□持続時間  ：ボス警告を持続する長さ（単位：fps）
    #□終了時間  ：終了画面に進行するまでの時間
    持続時間    = 150
    終了時間    = 50

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報:

    #□開始時間
    開始時間_ボス = None # ボス警告を持続するカウンタ
    開始時間      = None # シーン遷移を持続するカウンタ

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_上位): #① 上位のコンポジットクラス
        #┬
        #○データセット(コンポジット)のリファレンスを用意する
        self._仕様 = 引数_上位.仕様
        self._情報 = 引数_上位.情報
        #│
        #≫データセットを用意する
        self.仕様  = 仕様()
        self.情報  = 情報()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◇┐状況に応じて進行する 
        if DS.obj.自機共通.情報.シールド <= 0:
        #　├┐（シールドが切れた場合）
            #↓
            #●次のシーン『終了画面』に進行する
            self.Fn次シーン準備()
            #┴   

        elif DS.情報.ボスシーン != None:
        #　├┐（ボス襲来で警告中の場合）
            #↓
            #●ボスの登場を処理する
            self.Fnボス処理()
            #┴            

        elif DS.情報.プレイ時間 % DS.仕様.プレイ時間 == 0:
        #　├┐（レベルの変わり目の場合）
            #↓
            #○ボスシーンを『ボス警告』に進行する
            #○ボス警告カウントを開始する
            #○プレイ時間を1つ進める ※ボスシーンを繰り返さない為
            DS.情報.ボスシーン = DS.仕様.シーンID.ボス警告
            self.情報.開始時間_ボス = pyxel.frame_count
            DS.情報.プレイ時間 += 1
            #┴            

        else:
        #　└┐（その他）
            #↓
            #○プレイ時間を１つ進める
            #○難易度をセットする
            DS.情報.プレイ時間 += 1
            DS.情報.難易度 = DS.情報.プレイ時間 // DS.仕様.プレイ時間 + 1
        #┴　┴

    #┌───────────────────────────────────
    #│ボス登場を確認する
    #└───────────────────────────────────
    def Fnボス処理(self):
        #┬
        #○仕様のリファレンスを用意する
        画面仕様 = DS.仕様.リソース.画面
        #│
        #○ボスシーンを確認する
        if DS.情報.ボスシーン == None: return
        #│＼（ボス警告ではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐ボスシーンを進行する
        if DS.情報.ボスシーン == DS.仕様.シーンID.ボス警告:
        #　├┐（ボス警告の場合）
            #↓
            #○警告時間を減らす
            経過時間 = pyxel.frame_count - self.情報.開始時間_ボス
            時間あり = (経過時間 < self.仕様.持続時間)
            if 時間あり: return
            #│＼（まだ時間がある場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #○ボスシーンを『ボス登場』に進行する
            #○タイマーをリセットする
            #●BGMを切替える
            DS.情報.ボスシーン = DS.仕様.シーンID.ボス登場
            self.情報.開始時間_ボス = None
            共通.音声.自動再生(DS.仕様.シーンID.プレイ_ボス画面, DS.情報.難易度)
            #│
            #●特殊効果を解除(永続は残す)
            #○シールドを満タンにする
            #○弾を満タンにする
            DS.obj.特殊効果.FN動作.強制解除()
            DS.obj.自機共通.情報.シールド = 画面仕様.幅
            DS.obj.自機共通.情報.弾数     = DS.obj.自機共通.仕様.積載量
            #│
            #●敵機・アイテムを消滅する
            共通部品.爆発.壊滅(DS.obj.敵機    )
            共通部品.爆発.壊滅(DS.obj.アイテム)
            共通部品.効果音.爆発(1)
            #┴

        elif DS.情報.ボスシーン == DS.仕様.シーンID.ボス対決:
        #　├┐（ボス対決の場合）
            #↓
            #○ボスを確認する
            if len(DS.obj.敵機) > 0: return
            #│＼（まだボスがいる場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #○ボスシーンを終了する
            #●BGMを切替える
            DS.情報.ボスシーン = None
            共通.音声.自動再生(DS.仕様.シーンID.プレイ_ザコ画面, DS.情報.難易度)
            共通部品.効果音.爆発(2)
            #│
            #○シールドを満タンにする
            #○弾を満タンにする
            DS.obj.自機共通.情報.シールド = 画面仕様.幅
            DS.obj.自機共通.情報.弾数     = DS.obj.自機共通.仕様.積載量
            #┴

    #┌───────────────────────────────────
    #└───────────────────────────────────
    def Fn次シーン準備(self):
        #┬
        #◇┐終了画面を開始する
        if self.情報.開始時間 is None:
        #　├┐（待ちを開始する場合）
            #↓
            print("★★★爆破★★")
            #○持続カウントを開始する
            self.情報.開始時間 = pyxel.frame_count
            #│
            #◎└┐自機を爆発する
            for tmp自機 in DS.obj.自機:
                #│＼（すべての処理を終えた場合）
                #│ ↓
                #│ ▼繰り返し処理を抜ける
                #│
                #●大爆発する
                d = DS.obj.自機共通.仕様.爆発オフセット
                x = tmp自機.情報.X + d
                y = tmp自機.情報.Y
                共通部品.爆発.大爆発(x, y, 4, 6)
            #│
            #○自機を削除する
            #●爆発音を鳴らす
            DS.obj.自機.clear()
            共通部品.効果音.爆発(2)
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐次のシーンに進行する
        経過時間 = pyxel.frame_count - self.情報.開始時間
        時間あり = (経過時間 < self.仕様.終了時間)
        if 時間あり: return
        #│＼（まだ時間がある場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○待ち時間をリセットする
        self.情報.開始時間  = None
        #│
        #○シーンの遷移を指示する
        DS.情報.遷移要否 = True
        #┴