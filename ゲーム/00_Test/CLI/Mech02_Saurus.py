#======================================================
# Mech02_Saurus.py
#======================================================
import time
from 共通ユーティリティ import (
    アナログ入力測定,
    MP3_再生        ,
    PWM_電源_ON     ,
    PWM_電源_OFF    ,
    PWM_出力
)

#======================================================
def テスト実行(new_mmp):

    MMP = new_mmp()
    MMP.通信接続()

    try:
        #------------------------
        # 1) フットペダル（2人×2スイッチ）
        #------------------------
        print("------")
        print("ペダル")
        print("------")
        アナログ入力測定(
            MMP,
            スイッチ数   = 2,      # 各コントローラ 2 スイッチ
            参加人数     = 2,      # 2 プレイヤー
            丸め         = 200,
            繰返回数     = 50,
            待時間       = 0.2,
            全件表示     = True    # そのまま全件表示
        )

        #------------------------
        # 2) 通過センサー（PL=8,9 の 2ポート分のみ表示）
        #------------------------
        print("----------")
        print("通過センサ")
        print("----------")
        アナログ入力測定(
            MMP,
            スイッチ数      = 2,          # 各センサ 2 スイッチ（0,1）
            参加人数        = 10,         # PL=0..7 は予約、PL=8,9 を使うため 10 まで確保
            丸め            = 100,
            繰返回数        = 50,
            待時間          = 0.2,
            全件表示        = False,      # フィルタ表示に切替えるので無視される
            表示プレイヤー  = (8, 9),     # ← ここで最後の 2 プレイヤーだけ表示
            表示スイッチ    = (0, 1)      # ← スイッチ 0 と 1 を表示
        )

        #------------------------
        # 3) 恐竜ランド（基盤電源 + DCモータ加減速）
        #------------------------
        print("----------")
        print("恐竜ランド")
        print("----------")
        モータCH = (3, 15)   # DCモータ
        基盤CH   = (2, 14)   # 基盤電源

        最小   = 1300
        最大   = 3500
        間隔S  = 50
        間隔E  = -100
        停止s  = 0.2

        print("-> 基盤：電源ON")
        PWM_電源_ON(MMP, 基盤CH)

        print("-> DCモータ：速度アップ")
        for val in range(最小, 最大, 間隔S):
            PWM_出力(MMP, モータCH, val)
            time.sleep(停止s)

        time.sleep(1)

        print("-> DCモータ：速度ダウン")
        for val in range(最大, 最小, 間隔E):
            PWM_出力(MMP, モータCH, val)
            time.sleep(停止s)

        print("-> 基盤：電源OFF")
        PWM_出力(MMP, モータCH, 0)
        PWM_電源_OFF(MMP, 基盤CH)

        #------------------------
        # 4) 小屋の恐竜（サーボ首振り）
        #------------------------
        print("------------")
        print("小屋の恐竜")
        print("------------")
        恐竜CH = (1, 13)
        最小v, 最大v = 120, 380
        中央補正 = -18
        増分, 間隔s, 待ちs = 2, 0.02, 1.0

        def サーボスイープ(chs, vmin, vmax, center_offset=0, step=2, wait=0.02, hold=1.0):
            center = int((vmin + vmax) / 2) + center_offset
            print("->   PWM : 中央へ")
            PWM_出力(MMP, chs, center); time.sleep(hold)

            print("->   PWM : 中央～最大へ")
            for v in range(center, vmax, step):
                PWM_出力(MMP, chs, v); time.sleep(wait)
            time.sleep(hold)

            print("->   PWM : 最大～最小へ")
            for v in range(vmax, vmin, -step):
                PWM_出力(MMP, chs, v); time.sleep(wait)
            time.sleep(hold)

            print("->   PWM : 最小～中央へ")
            for v in range(vmin, center, step):
                PWM_出力(MMP, chs, v); time.sleep(wait)

        サーボスイープ(恐竜CH, 最小v, 最大v, 中央補正, 増分, 間隔s, 待ちs)

        #------------------------
        # 5) 小屋のメータ（サーボ）
        #------------------------
        print("------------")
        print("小屋のメータ")
        print("------------")
        メータCH = (0, 12)
        サーボスイープ(メータCH, 120, 370, 0, 2, 0.02, 1.0)

        #------------------------
        # 6) ジオラマ（砂時計＋恐竜）
        #------------------------
        print("--------")
        print("ジオラマ")
        print("--------")

        # 砂時計：リニア上げ下げ
        砂時計CH      = 5
        砂_最小, 砂_最大 = 136, 616
        砂_増分, 砂_間隔 = 1, 0.002

        print("-> 砂時計 PWM : 最小から最大")
        for v in range(砂_最小, 砂_最大, 砂_増分):
            PWM_出力(MMP, 砂時計CH, v); time.sleep(砂_間隔)
        time.sleep(1)

        # ジオラマ恐竜：2ch サーボ
        ジオラマ恐竜CH = (7, 6)
        サーボスイープ(ジオラマ恐竜CH, 230, 370, 0, 2, 0.005, 1.0)
        time.sleep(1)

        print("-> 砂時計 PWM : 最大から最小")
        for v in range(砂_最大, 砂_最小, -砂_増分):
            PWM_出力(MMP, 砂時計CH, v); time.sleep(砂_間隔)

        #------------------------
        # 7) BGM再生
        #------------------------
        print("----------")
        print("ＭＰ３再生")
        print("----------")
        MP3_再生(
            MMP,
            再生リスト=[
                (2,1),  # メインBGM：タイトル画面
                (2,2),  # メインBGM：プレイ画面
                (2,3)   # メインBGM：終了画面
                ]
            )

    finally:
        # 念のため全電源OFFしてから切断（安全策）
        try:
            PWM_電源_OFF(MMP, (2, 14))   # 基盤
            PWM_出力(MMP, (3, 15), 0)    # DCモータ
        except Exception:
            pass
        MMP.通信切断()
