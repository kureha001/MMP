#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：発電機(移動プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┃・下位にデータセット･クラス(仕様)を持つ
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  main.GAME共通                   as 共通処理
from    main.データセット               import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃データセット：仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self, 引数_ポート): #① ペダルのポート・リスト

        #□ ペダル情報リスト
        self.ペダル = []
        for ペダル番号 in range(引数_ポート):
            self.ペダル.append(ペダル番号,0,0,0)
            

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ,   #① 個体オブジェクト
            引数_ポート ):  #② ペダルのポート・リスト
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._情報  = 引数_個体.情報
        #│
        #○データセットを用意する
        self.仕様  = 仕様クラス(引数_ポート)
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        return
        #┬
        #●前進(下方に移動)する
        漕ぐ力 = self.Fn漕ぐ()
        #│
        #●発電する
        self.Fn発電(*漕ぐ力)
        #┴
	#────────────────────────────────────
    def Fn漕ぐ(self):
        #┬
        右 = 0
        左 = 0
        #│
        #◎└┐
        for 各ペダル in self.仕様.ペダル:
            #│＼（全ペダルを走査した場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #●操作概要を確認する
            結果 = 共通処理.入出力.入力走査(self._仕様.番号)
#            if 結果[0][1] == 0: return True
            #│＼（押されたものが『ない』場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #◇┐漕ぐを求める
            if 結果[1][0] and not 結果[1][1]:右 += 1
            #　├┐（右足がON・左脚がOFFの場合）
                #↓
                #○右足の力を加える
                #┴
            elif not 結果[1][0] and 結果[1][1]:左 += 1
            #　├┐（右足がOFF・左脚がONの場合）
                #↓
                #○左足の力を加える
                #┴
            #　└┐（その他）
            #┴　┴
        #│
        return (右,左)
        #┴
	#────────────────────────────────────
    def Fn発電(self     ,
             引数_右    ,
             引数_左    ):
        #┬
        pass