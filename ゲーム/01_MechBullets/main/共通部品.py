#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃共通処理
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import sys; sys.path.append('..'); import 共通.MMP
from   .汎用部品                   import 入力操作
from   .データセット               import DS
from   .オブジェクト.演出.爆発     import 爆発生成

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃爆発
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 爆発():
	#────────────────────────────────────
    def 壊滅(引数_対象一覧):  #① 壊滅対象のオブジェクト一覧
        #┬
        #◎└┐対象に壊滅する
        for tmp対象 in 引数_対象一覧.copy():
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●相手を破壊する
            tmp対象.FN衝突.実行() 
        #┴　┴

    def 大爆発(
            引数_X      ,   #① 爆発の位置(X座標)
            引数_Y      ,   #② 爆発の位置(Y座標)
            引数_範囲   ,   #③ 広がる範囲
            引数_個数   ):  #④ 個数
        #┬
        爆発生成(引数_X, 引数_Y, 8)
        #│
        #◎└┐複数爆発する
        for i in range(1,引数_個数):
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #≫ランダムな位置・大きさで爆発する
            a = 引数_範囲
            x = 引数_X + pyxel.rndi(-a,a)
            y = 引数_Y + pyxel.rndi(-a,a)
            r = pyxel.rndi(4,7)
            爆発生成(x, y, r)
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃効果音
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 効果音():
	#────────────────────────────────────
    def 爆発(引数_サイズ): #① 0:被弾/1:爆破/2:大爆発
        #┬
        pyxel.play( 0, 60 + 引数_サイズ, resume = True ) 
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃入力走査
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 入出力():

    #対象区分
    ID_移動 = 0 # 移動スティック
    ID_発射 = 1 # 押しボタン

    MMP     = None          # MMPオブジェクト
    MMP_ON  = [             # Chごとの状態：ON(True)/OFF(False) 
            [False,False,False,False],  # ポート0用
            [False,False,False,False],  # ポート1用
            [False,False,False,False]]  # ポート2用
            
    MMP_BTN = (             # Chごとの閾値(下限,上限) 
            (20,100)    ,   # ハットスイッチ
            (450,500)   ,   # ボタン１
            (260,300)   ,   # ボタン２
            (50,100)    )   # ボタン３（発射ボタン）

	#────────────────────────────────────
    def 入力走査(引数_種類,引数_番号):

        if DS.情報.操作手段 == 0:

            if   引数_種類 == 入出力.ID_発射: 一覧 = 入力操作.IDボタン_キー[引数_番号]
            elif 引数_種類 == 入出力.ID_移動: 一覧 = 入力操作.ID移動_キー[引数_番号]
            結果 = 入力操作.走査(一覧)

        elif DS.情報.操作手段 == 1:

            if   引数_種類 == 入出力.ID_発射: 一覧 = 入力操作.IDボタン_パッド[引数_番号]
            elif 引数_種類 == 入出力.ID_移動: 一覧 = 入力操作.ID移動_パッド[引数_番号]
            結果 = 入力操作.走査(一覧)

        elif DS.情報.操作手段 == 2:

            if   引数_種類 == 入出力.ID_発射: 結果 = 入出力.MMP_発射(引数_番号)
            elif 引数_種類 == 入出力.ID_移動: 結果 = 入出力.MMP_移動(引数_番号)
        
        return 結果
	#────────────────────────────────────
    def MMP_移動(引数_番号):
		#┬
		#○結果を初期化する
        概要 = [ False, False ]
        測定 = [ 0,0,0,0 ]
        入力値 = 共通.MMP.接続.mmpAnaVal[引数_番号]
		#│
        中央値  = DS.情報.MMP中央値
        閾値    = (DS.情報.MMP反応率/100) * 中央値
        下限    = 中央値 - 閾値
        上限    = 中央値 + 閾値
		#│
        #○縦移動を測定する
        測定[0] = (1) if 入力値[0] < 下限 else (0)
        測定[1] = (1) if 入力値[0] > 上限 else (0)
		#│
        #○横移動を測定する
        測定[2] = (1) if 入力値[1] > 上限 else (0)
        測定[3] = (1) if 入力値[1] < 下限 else (0)
		#│
		#◎└┐概要を求める
        for i in  測定:
            if i != 0:
                概要 = [ True, True ]
                break
            #┴
		#│
        #▼結果を返す
        return (概要,測定)
	#────────────────────────────────────
    def MMP_発射(引数_ポートNo):
		#┬
		#○結果を初期化する
        概要 = [ False, False ]
        測定 = [ 0,0,0,0 ]
		#│
        #○ポートのアナログ値を用意する
        ポートNo = 引数_ポートNo
        入力値 = 共通.MMP.接続.mmpAnaVal[ポートNo][2]
		#│
		#◎└┐ON/OFF状態を求める
        for 各Ch in range(4):
            #│
            #◇┐移動予定の座標を求める
            キー = 入出力.MMP_BTN[各Ch]
            下限 = キー[0]
            上限 = キー[1]
            入力判定 = ( (下限 < 入力値) and (入力値 < 上限) )
            if 入力判定:
            #　├┐（状態が『ON』の場合）
                #↓
                #○状態を『ONしている』にする
                #○測定を『ON』にする
                #○概要(ON)を『YES』にする
                入出力.MMP_ON[ポートNo][各Ch] = True
                測定[各Ch] = 1
                概要[0] = True
                #┴
            elif 入出力.MMP_ON[ポートNo][各Ch]:
            #　├┐（前回の状態が『ON』の場合）
                #↓
                #○状態を『OFF』にする
                #○測定を『OFFした直後』にする
                #○概要(OFF)を『YES』にする
                入出力.MMP_ON[ポートNo][各Ch] = False
                測定[各Ch] = -1
                概要[1] = True
                #┴
            #　└┐（その他）
                #┴
		#│
        #▼結果を返す
        return (概要,測定)