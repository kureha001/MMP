#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：発電機(移動プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.GAME共通 as 共通処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):   #① 個体オブジェクト
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│漕ぐ力に応じて発電する
    #│この機能が実行されると、以下の状態になる：
    #│・発電した電力は発電機に蓄電する
    #│・発電ローターの位相を一定角度移動する
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●前進(下方に移動)する
        漕ぐ力 = self.Fn漕ぐ力()
        #│
        #●発電する
        self.Fn発電(*漕ぐ力)
        #┴
	#────────────────────────────────────
    # ペダルの操作状況から、左右の足ごとに漕ぐ力を求める
	#────────────────────────────────────
    def Fn漕ぐ力(self): #【戻り値】 リスト(右足の漕ぐ力，左足の漕ぐ力)
        #┬
        #○左右の漕ぐ力を初期化する
        右 = 0
        左 = 0
        #│
        #◎└┐漕ぐ力を求める
        for 各ポート in self._仕様.ポート:
            #│＼（全ペダルを走査した場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #●ペダル操作状況を用意する
            結果 = 共通処理.入出力.入力走査(各ポート)
            #│
            #◇┐ペダル操作状況から、漕ぐ力を求める
            if       結果[1][0] and not 結果[1][1]: 右 += 1
            elif not 結果[1][0] and     結果[1][1]: 左 += 1
            #　├┐（右足がON・左脚がOFFの場合）
                #↓
                #○右足の力を加える
                #┴
            #　├┐（右足がOFF・左脚がONの場合）
                #↓
                #○左足の力を加える
                #┴
            #　└┐（その他）
            #┴　┴
        #│
        #▼左右の漕ぐ力を返す
        return (右,左)
	#────────────────────────────────────
    # 発電ロータの位相・漕ぐ力に応じて電力を蓄電する
    # 発電ロータの位相を一定角度移動する
	#────────────────────────────────────
    def Fn発電(self     ,
             引数_右    ,   # 右足の漕ぐ力
             引数_左    ):  # 左足の漕ぐ力
        #┬
        #○左右の足の力差を用意する
        右足の力 = 引数_右 - 引数_左
        #│
        #◇┐漕ぐ力に応じて電力を蓄電する
        右足判定 = 共通処理.発電機.右足判定(self._情報.角度)
        if 右足判定: self._情報.蓄電量 += ( 右足の力) if 右足の力 > 0 else (0)
        else       : self._情報.蓄電量 += (-右足の力) if 右足の力 < 0 else (0)
        #　├┐（右足を踏むべき状況の場合）
            #↓
            #○『右足の漕ぐ力』で電力を蓄電する
            #┴
        #　└┐（その他）
            #↓
            #○『左足の漕ぐ力』で電力を蓄電する
            #┴
        #│
        #○発電ロータの位相(角度)を更新する
        self._情報.角度 += 7
        if self._情報.角度 > 360: self._情報.角度 = 0
        #　 ＼（発電ロータが1回転した場合）
            #↓
            #○角度を0度に補正する
        #┴　┴
