#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：終了画面(描画機能)
#┠─────────────────────────────────────
#┃描画コントローラが描画プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.GAME共通                         as 共通処理
from   main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    #□開始時間  ：終了画面を持続するカウンタ
    動作フラグ = False

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン：終了画面(描画機能)
#┠─────────────────────────────────────
#┃描画コントローラが描画プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 描画クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
      #┬
      #○個体オブジェクトのリファレンスを用意する
      self._仕様  = 引数_個体.仕様
      #│
      #○個体オブジェクトのリファレンスを用意する
      self.情報  = 情報クラス()
      #┴
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●画面で表現する
        self.Fn画面表現()
        #│
        #○立体表現のタイミングを調べる
        if pyxel.frame_count % 15 != 0: return
        #│ ＼（タイミングではない場合）
        #│  ↓
        #│  ▼処理を中断する
        #│
        #●立体で表現する
        self.Fn立体表現()
        #┴
	#────────────────────────────────────
    def Fn画面表現(self):
        #┬
        #○画面を描画する
        描画文字 = "- TIME UP -"
        pyxel.text(40, 79, 描画文字, 5)
        pyxel.text(39, 78, 描画文字, pyxel.frame_count % 16)
        #┴
	#────────────────────────────────────
    def Fn立体表現(self):
        #△┐勝利チームの恐竜が雄たけびをあげる。
        if self.情報.動作フラグ:
        #　├┐（恐竜の首振り指示がある場合）
            #↓
            #●勝利チームの恐竜が雄たけびをあげる
            self.Fn勝利の雄たけび
            #│
            #○次回は首振り指示させないよう、フラグをセットする。
            self.情報.動作フラグ = False
            #┴
        else:
        #　└┐（その他）
            #↓
            #●勝敗を恐竜で表現する
            self.Fn勝敗表現
            #│
            #○次回は首振り指示させるよう、フラグをセットする。
            self.情報.動作フラグ = True 
        #┴　┴
	#────────────────────────────────────
    def Fn勝利の雄たけび(self):
        #┬
        #△┐勝利チームの恐竜が雄たけびをあげる
        救出数1 = DS.obj.運搬機[0].情報.救出数
        救出数2 = DS.obj.運搬機[1].情報.救出数
        if 救出数1 > 救出数2:
        #　├┐（チーム１が勝利の場合）
            #↓
            #●恐竜の首を震わす
            共通処理.入出力.MMP.PWM_VALUE(
            self._仕様.恐竜[0]      ,
            self._仕様.中央[0] - 10 )
            #┴

        elif 救出数1 < 救出数2:
        #　└┐（その他）
            #↓
            #●恐竜の首を震わす
            共通処理.入出力.MMP.PWM_VALUE(
            self._仕様.恐竜[1]      ,
            self._仕様.中央[1] + 10 )
            #┴
        #　└┐（その他）
            #┴
	#────────────────────────────────────
    def Fn勝敗表現(self):
        #┬
        #△┐恐竜のベクトルを求める
        救出数1 = DS.obj.運搬機[0].情報.救出数
        救出数2 = DS.obj.運搬機[1].情報.救出数
        if   救出数1 > 救出数2: 移動量 = -65
        elif 救出数1 < 救出数2: 移動量 =  65
        else                  : 移動量 =   0
        #　├┐（チーム１が勝利の場合）
            #↓
            #○移動ベクトルを用意する。
            #┴
        #　├┐（チーム２が勝利の場合）
            #↓
            #○移動ベクトルを用意する。
            #┴
        #　└┐（その他）
            #↓
            #○移動ベクトルをゼロで用意する。
            #┴
        #│
        #◎└┐恐竜を動かす
        for 番号 in range(2):
            #│＼（チームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●勝ちチームの恐竜が頭を上げ、敗けチームが下げる。
            共通処理.入出力.MMP.PWM_VALUE(
                self._仕様.恐竜[番号]             ,
                (self._仕様.中央[番号] + 移動量 ) )
        #┴　┴