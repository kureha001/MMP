#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ画面(描画機能)
#┠─────────────────────────────────────
#┃描画コントローラが描画プロセスで実行するアクション・メソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.GAME共通                         as 共通処理
from   main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 描画クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        pass
    #┌───────────────────────────────────
    #│機能実行
    #├───────────────────────────────────
    #│※自機が無い場合は表示不可 または 意味がない為、処理をスキップする
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #〇残り時間を画面表示する
        pyxel.text(54, 2, f"{str(DS.情報.プレイ時間).zfill(3)}", 10)
        #│
        #◎└┐発電機のサイクルを描画する
        for チーム in range(2):
            #│＼（すべてのチームを走査し終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #○出力を求める
            運搬機   = DS.obj.運搬機[チーム]
            出力     = 運搬機.情報.出力電力
            最低出力 = 運搬機.仕様.最低出力
            最高出力 = 運搬機.仕様.最高出力
            比率     = (出力-最低出力)/(最高出力-最低出力)
            #│
            #○方向指示・出力表現する
            self.Fn立体表現(チーム, 比率)
            self.Fn画面表示(チーム, 比率, 出力)
        #┴　┴
	#────────────────────────────────────
    def Fn立体表現(self, チーム, 比率 ):
        #┬
        首   = (4,8)
        骨   = (6,10)
        最小 = 140          # 首=左、骨=MAX
        最大 = 380          # 首=右、骨=MIN
        範囲 = 最大 - 最小  # PWMの幅
        #│
        #○出力を表現する
        目盛 = 最大 - int(範囲 * 比率)
        共通処理.入出力.MMP.PWM_VALUE(骨[チーム],目盛)
        #│
        #◇┐方向指示を表現する
        角度     = DS.obj.発電機[チーム].情報.角度
        左右判定 = 共通処理.発電機.右足判定(角度)
        if 左右判定:
        #　├┐（左脚の場合）
            #↓
            #○左脚を指示する
            共通処理.入出力.MMP.PWM_VALUE(首[チーム],最大)
        else       :
        #　└┐（その他）
            #↓
            #○右脚を指示する
            共通処理.入出力.MMP.PWM_VALUE(首[チーム],最小)
    #┴　┴　┴
	#────────────────────────────────────
    def Fn画面表示(self, チーム, 比率, 出力):
        #┬
        画面高   = DS.仕様.画面高
        #│
        #○出力を表現する
        目盛 = int(画面高 * 比率)
        開始 = 画面高 - 目盛
        pyxel.rect((10+70*チーム),開始, 30 , 目盛, 15)            # 矩形描画
        pyxel.text((10+8+70*チーム) , (画面高-10), str(出力), 8 ) # 数値表示
        #│
        #◇┐方向指示を表現する
        角度     = DS.obj.発電機[チーム].情報.角度
        左右判定 = 共通処理.発電機.右足判定(角度)
        if 左右判定: pyxel.blt(25+70*チーム,25+55*チーム, 0, 80,0, 24,56, 0)
        else       : pyxel.blt( 2+70*チーム,25+55*チーム, 0, 56,0, 24,56, 0)
        #　├┐（フレーム処理タイミングの場合）
            #↓
            #○左脚を指示する
        #　└┐（その他）
            #↓
            #○右脚を指示する
    #┴　┴　┴
