#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能→表現プロセスのアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from   main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│プロセス実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●キャラクタ別で表現する
        self.Fnキャラクタ別()
        #│
        #●シーン別で表現する
        DS.obj.シーン[DS.情報.シーン].FN表現.実行()
        #┴

	#────────────────────────────────────
    # キャラクタ別で表現
	#────────────────────────────────────
    def Fnキャラクタ別(self):
        #┬
        #○コンテナを確認する
        if len(DS.obj.発電機) == 0: return
        if len(DS.obj.運搬機) == 0: return
        #│＼（コンテナが空の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎└┐キャラクタで表現する
        for チーム in range(2):
            #│＼（全チームを走査した場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #●運搬機(出力)で表現する
            DS.obj.運搬機[チーム].FN表現.実行()
            #│
            #●発電機(方向指示)で表現する
            DS.obj.発電機[チーム].FN表現.実行()
        #┴　┴