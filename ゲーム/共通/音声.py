#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃アプリ共通：ＭＭＰ音声(DFPlayer)
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# [システム共通]
import time
import pyxel

# [アプリ共通]
from . import MMP # アプリとのコネクション

#────────────────────────────────────
# データセット：情報
#────────────────────────────────────
class 情報:

    システムNo = None
    規定音量   = 15

    検索キー   = None
    検索Lv     = None

    装置No     = 1
    シーンID   = 1
    ファイルNo = 1
    フォルダNo = 1

    #□ 検索レベル(0～4)別情報
    レベル一覧     = [{},{},{},{}]
    ファイルNo一覧 = [{},{},{},{}]
    再生時間       = [None,None,None,None]

#────────────────────────────────────
# 効果音
#────────────────────────────────────
def クリック音():
    pyxel.play( 0, 63, resume = True ) 

def ゲット音():
    pyxel.play( 0, 60, resume = True ) 

#────────────────────────────────────
# シーンに合ったBGMを自動演奏する
#────────────────────────────────────
def 自動再生(
        引数_シーンID           ,  #① フォルダ一覧を検索するキー
        引数_検索キー   = 0     ,  #② ファイル一覧を検索するキー
        引数_装置No     = 0     ,  #③ DFPlayerの装置No(1/2)
        引数_停止       = False ): #④ 一度再生を止めるフラグ
    #┬
    #○未指定の引数はデフォルト値で補正する
    装置No   = (情報.装置No    ) if 引数_装置No   == 0 else (引数_装置No  )
    シーンID = (情報.シーンID  ) if 引数_シーンID == 0 else (引数_シーンID)
    検索キー = (シーンID       ) if 引数_検索キー == 0 else (引数_検索キー)
    #│
    #○ファイル一覧を求める
    レベル = 情報.レベル一覧[シーンID  ]
    一覧   = 情報.ファイルNo一覧[レベル]
    #│
    #○再生パラメータセットを用意する
    if 検索キー not in 一覧:
        検索キー = next(reversed(一覧)         )
        データ   = next(reversed(一覧.values()))
    else:
        データ = 一覧[検索キー]
    #│
    #○個別の再生パラメータを求める
    ファイルNo = (検索キー) if データ[0] == 0 else (データ[0])    
    音量       = データ[1]
    時間       = データ[2]
    #│
    #│
    #○求めたパラメータで情報を更新する
    情報.シーンID   = シーンID
    情報.検索キー   = 検索キー
    情報.装置No     = 装置No
    情報.フォルダNo = 情報.システムNo
    情報.再生時間   = 時間
    #│
    #○求めたパラメータで再生する
    個別指定(
        引数_ファイルNo = ファイルNo,
        引数_音量       = 音量      ,
        引数_一時停止   = 引数_停止 )
    #┴

#────────────────────────────────────
# 指定フォルダ・トラックを演奏する
# ※停止➡WAIT➡音量➡再生の順に実行すること(フリーズする為)
#────────────────────────────────────
def 個別指定(
        引数_ファイルNo         ,  #① SDカードのフォルダ内のファイルNo
        引数_フォルダNo =  0    ,  #② SDカードのフォルダNo
        引数_音量       =  0    ,  #③ DFPlayerの音量
        引数_装置No     =  0    ,  #④ DFPlayerの装置No
        引数_一時停止   = False ): #⑤ 一度再生を止めるフラグ
    #┬
    #○未指定の引数はデフォルト値で補正する
    装置No     = (情報.装置No    ) if 引数_装置No     == 0 else (引数_装置No    )
    フォルダNo = (情報.フォルダNo) if 引数_フォルダNo == 0 else (引数_フォルダNo)
    音量       = (情報.規定音量  ) if 引数_音量       == 0 else (引数_音量      )
    #│
    #○一旦停止する
    if 引数_一時停止:
        MMP.接続.DFP_Stop(1)
        time.sleep(0.2)
    #│
    #○指定したファイル・音量で再生する
    MMP.接続.DFP_Volume(装置No,音量)
    MMP.接続.DFP_PlayFolderTrack(装置No,フォルダNo,引数_ファイルNo)
    #┴

#────────────────────────────────────
# 繰返し再生する
#────────────────────────────────────
def リピート再生():
    #┬
    #○BGMを繰返し条件を確認する
    フレーム判定 = (pyxel.frame_count % 30 != 0)
    再生中要否   = (情報.再生時間 is None)
    if フレーム判定 or 再生中要否: return
    #│＼（フレーム処理タイミングでないか、BGMの再生が不要の場合）
    #│ ↓
    #│ ▼処理を中断する
    #│
    #○再生時間カウンタをカウントダウンする
    情報.再生時間 -= 1
    if 情報.再生時間 > 0: return
    #│＼（再生時間が終了していない場合）
    #│ ↓
    #│ ▼処理を中断する
    #│
    #○再生時間カウンタを初期化する
    情報.再生時間 = None
    #│
    #●ＢＧＭを再生する
    自動再生(情報.シーンID)
    #┴