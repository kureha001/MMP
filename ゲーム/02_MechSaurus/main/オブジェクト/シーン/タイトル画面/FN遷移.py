#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能→遷移プロセスのアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import time
import main.GAME共通                                       as 共通処理
from   main.データセット               import データセット as DS
from   main.オブジェクト.キャラ.発電機 import 発電機の生成
from   main.オブジェクト.キャラ.運搬機 import 運搬機の生成
from   ..DB                            import シーンID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 遷移クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
        #┬
        #○個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬ 
        #●ゲーム情報を初期化する
        #●オブジェクトを初期化する
        #●立体物を初期化する
        #●音声を再生する
        self.Fnゲーム情報を初期化()
        self.Fnオブジェクトを初期化()
        self.Fn立体物を初期化()
        self.Fn音声を再生()
        #┴
	#─────────────────────────────────────
    def Fnゲーム情報を初期化(self):
        #┬ 
        #○シーンを『プレイ画面』に遷移する
        DS.情報.シーン = シーンID.プレイ画面
        #│
        #○プレイ時間を初期化する
        DS.情報.プレイ時間 = self._仕様.時間一覧[self._情報.時間番号][1]
        self._情報.時間番号 = 0
        #┴
	#─────────────────────────────────────
    def Fnオブジェクトを初期化(self):
        #┬ 
        #●運搬機オブジェクトをコンテナに生成する
        #　※MMP番号,PWM番号(モータ,電飾)
        運搬機の生成(9,(15,14)) #チーム２
        運搬機の生成(8,( 3, 2)) #チーム１
        #│
        #○ペダル一覧(MMPポート番号)を用意する
        チーム2 = list(range(DS.情報.人数, (DS.情報.人数 + DS.情報.人数)))
        チーム1 = list(range(DS.情報.人数))
        #│
        #●用意したペダル一覧で、発電機オブジェクトをコンテナに生成する
        発電機の生成(チーム2)
        発電機の生成(チーム1)
        #┴
	#────────────────────────────────────
    def Fn立体物を初期化(self):
        #┬ 
        #◇┐砂時計を動かす情報を準備を整える
        if self._情報.砂時計向き:
        #　├┐（赤印が上の場合）
            #↓
            #○赤印を下に向けるよう準備する
            self._情報.砂時計向き = False
            開始 = self._仕様.最小
            終了 = self._仕様.最大
            増分 = 2
        else:
        #　└┐（その他）
            #↓
            #○赤印を上に向けるよう準備する
            self._情報.砂時計向き = True
            開始 = self._仕様.最大
            終了 = self._仕様.最小
            増分 = -2
        #│
        #◎└┐準備した情報に従い、砂時計を動かす
        for val in range(開始, 終了, 増分):
            共通処理.入出力.MMP.PWM_VALUE(self._仕様.砂時計,val)
            time.sleep(0.002)
        #┴
	#────────────────────────────────────
    def Fn音声を再生(self):
        #┬ 
        #●恐竜の鳴き声を鳴らす
        共通処理.BGM_DFP.指定曲(1)      # FDPlayer
        time.sleep(2)
        #│
        #●BGMを切替える
        共通処理.BGM_DFP.自動選択()    # FDPlayer
        共通処理.運搬機.電飾制御(True) # 内臓モジュール
        time.sleep(3)
        #┴