#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃汎用部品：入力
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
from . import MMP

#────────────────────────────────────
class 情報:

    # 16ポート毎・4Chごとの状態：ON(True)/OFF(False) 
    状態 = tuple([False] * 4 for _ in range(16))

#────────────────────────────────────
def 入力走査(
        引数_ポートNo   ,   #① ポート番号
        引数_Ch一覧     ,   #② チャンネルNo一覧
        引数_閾値       ):  #③ ＋値：大きければON／－値：大きければOFF
    #┬
    #○結果を初期化する
    概要 = [ False, False ] # ONしている，OFFした直後
    測定 = [ 0,0,0,0 ]      # Chごとの測定値(1:ON/-1:OFFになった/0:通常のOFF) 
    #│
    #○ポートのアナログ値を用意する
    ポートNo = 引数_ポートNo
    入力値 = MMP.接続.mmpAnaVal[ポートNo]
    #│
    #◎└┐チャンネルごとのON/OFF状態を求める
    for 各Ch in 引数_Ch一覧:
        #│
        #○スイッチ状態を求める
        if 引数_閾値 > 0: 判定 = (入力値[各Ch] >  引数_閾値)
        else            : 判定 = (入力値[各Ch] < -引数_閾値)
        #│
        #◇┐入力状況を走査する
        if 判定:
        #　├┐（状態が『ON』の場合）
            #↓
            #○状態を『ONしている』にする
            #○測定を『ON』にする
            #○概要(ON)を『YES』にする
            情報.状態[ポートNo][各Ch] = True
            測定[各Ch] = 1
            概要[0] = True
            #┴
        elif 情報.状態[ポートNo][各Ch]:
        #　├┐（前回の状態が『ON』の場合）
            #↓
            #○状態を『OFF』にする
            #○測定を『OFFした直後』にする
            #○概要(OFF)を『YES』にする
            情報.状態[ポートNo][各Ch] = False
            測定[各Ch] = -1
            概要[1] = True
            #┴
        #　└┐（その他）
            #┴
    #│
    #▼結果を返す
    return (概要,測定)