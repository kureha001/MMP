#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃共通処理
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
from main.汎用部品        import mmp
from .データセット        import データセット as DS
from .オブジェクト.シーン import シーンID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃ＭＭＰによる演奏
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class BGM_DFP():

    # シーン別のMP3ファイル再生時間
    シーン = {1:45, 2:80, 3:58 }

	#────────────────────────────────────
    # シーンに合ったBGMを演奏する
	#────────────────────────────────────
    def 自動選択():
        シーン  = DS.情報.シーン
        if   シーン == シーンID.タイトル画面: BGM_DFP.演奏(1)
        elif シーン == シーンID.プレイ画面  : BGM_DFP.演奏(2)
        elif シーン == シーンID.終了画面    : BGM_DFP.演奏(3)
	#────────────────────────────────────
    # ルートフォルダの指定トラックをループ演奏する
	#────────────────────────────────────
    def 演奏(引数_ファイル番号):
        DS.情報.再生時間 = BGM_DFP.シーン[引数_ファイル番号]
        入出力.MMP.DFP_Play(1,引数_ファイル番号)

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃ＭＭＰによる入力走査
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 入出力():

    MMP     = None  # MMPオブジェクト

    MMP_ON  = [     # Chごとの状態：ON(True)/OFF(False) 
            False,  # ポート0用 [Ch0]
            False,  # ポート1用 [Ch0]
            False,  # ポート2用 [Ch0]
            False,  # ポート3用 [Ch0]
            False,  # ポート4用 [Ch0]
            False,  # ポート5用 [Ch0]
            False,  # ポート6用 [Ch0]
            False,  # ポート7用 [Ch0]
            False]  # ポート8用 [Ch0]

	#────────────────────────────────────    
    def MMP_初期化():
        #┬
        #●MMPを実体化する。
        入出力.MMP = mmp()
        #│
        #●MMPを接続する
        入出力.MMP.通信接続_自動()
        #│
        #●アナログ入力を設定する
        入出力.MMP.アナログ設定(
                2,  # 使用するHC4067の個数(1～4)
                8,  # 使用するHC4067のPin数(1～16)
                10 # アナログ値の丸め(この数値以下は切り捨て)
                )
        #┴
	#────────────────────────────────────
    def 入力走査(引数_ポートNo):
		#┬
		#○結果を初期化する
        概要 = [ False, False ] # ONしている，OFFした直後
        測定 = 0                # 測定値(1:ON/-1:OFFになった/0:通常のOFF) 
		#│
        #○ポートのアナログ値を用意する
        ポートNo = 引数_ポートNo
        入力値   = 入出力.MMP.mmpAnaVal[ポートNo]
		#│
        #◇┐移動予定の座標を求める
        if 400 < 入力値[0] and 入力値[0] < 1000:
        #　├┐（状態が『ON』の場合）
            #↓
            #○状態を『ONしている』にする
            #○概要(ON)を『YES』にする
            #○測定を『ON』にする
            入出力.MMP_ON[ポートNo] = True
            概要[0] = True
            測定    = 1
            #┴
        elif 入出力.MMP_ON[ポートNo]:
        #　├┐（前回の状態が『ON』の場合）
            #↓
            #○状態を『OFF』にする
            #○概要(OFF)を『YES』にする
            #○測定を『OFFした直後』にする
            入出力.MMP_ON[ポートNo] = False
            概要[1] = True
            測定    = -1
            #┴
        #　└┐（その他）
            #┴
		#│
        #▼結果を返す
        return (概要,測定)
    
#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃ＭＭＰデバイス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class カモロボ():
	#────────────────────────────────────
	#────────────────────────────────────
    def 停止():
		#┬
        #○運搬機を確認する
        if len(DS.obj.カモロボ) == 0: return
        #│＼（運搬機を走査し終えた場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●運搬機の全機能を停止する
        カモロボ.電飾制御(False)
        #┴
	#────────────────────────────────────
    def 電飾制御(引数_活性可否): #① True:活性化／False:非活性化
		#┬
        if len(DS.obj.カモロボ) == 0: return
        #│
        #〇引数に応じてPWM値を設定する
        PWM値 = (4095) if 引数_活性可否 else (-1)
        #│
        #≫運搬機の電飾を活性制御する
        for i in range(2):
            for 各ポート in DS.obj.カモロボ[i].仕様.ポート一覧:
                入出力.MMP.PWM_VALUE(各ポート, PWM値)
                print("カモロボ(",i,")：",引数_活性可否)
        #┴
