#======================================================
# MECH BULLETS用 テストプログラム(CPython版)
#======================================================
import time

# CPython版
import sys; sys.path.append('..'); import 共通.mmpRottenmeier
MMP = 共通.mmpRottenmeier.mmp() 

#======================================================
# メイン処理
#======================================================
def main():
    #┬
    #●MMPを接続する。
    MMP.通信接続_自動() # CPython版
    #│
    #●テストを実行する
    アナログ入力()      # 外部接続のジョイパッドを想定
    MP3再生()           # DFPlayerの制御
    #│
    #●MMPを切断する
    MMP.通信切断()
    #┴

#======================================================
# テスト項目：アナログ入力
#======================================================
def アナログ入力():
    #┬
    print("--------------------")
    print(" アナログ入力テスト")
    print("--------------------")
    #│
    #●アナログ設定
    繰返回数 = 100      # アドレス切替回数
    待時間   = 0.05     # ウェイト(秒)
    全権表示 = True     # True:全件表示／False:先頭末尾のみ表示
    MMP.アナログ設定(
        4,              # 使用するHC4067の個数(1～4)
        1,              # 使用するHC4067のPin数(1～16)
        100             # アナログ値の丸め(この数値以下は切り捨て)
    )
    #│
    #◎└┐繰り返し読み取る。
    print("(測定データ)")
    time_start = time.time()
    for cntLoop in range(繰返回数):
        #●全アドレスから読み取る。
        MMP.アナログ読取()
        #│
        #○結果を表示する。
        if 待時間 > 0 : time.sleep(待時間)
        if 全権表示 : print("  %03i" % cntLoop,":", MMP.mmpAnaVal)
        else        : print("  %03i" % cntLoop,":", MMP.mmpAnaVal[0],"～", MMP.mmpAnaVal[-1])
        #┴
    #│
    #○計測結果を表示する。
    time_end = time.time()
    time_diff = time_end - time_start
    print("\n(実施条件)")
    print("・繰返回数         : %i" % (繰返回数))
    print("・アドレス変更回数 : %i" % (MMP.参加総人数 * 繰返回数))
    print("\n(測定結果)")
    cntTtl = 繰返回数 * MMP.スイッチ数 * MMP.参加総人数
    print("・合計時間   : %02.06f秒"   % (time_diff))
    print("・データ平均 : %01.06f秒\n" % (time_diff / cntTtl))
    #┴

#======================================================
# テスト項目：MP3再生
#======================================================
def MP3再生():
    #┬
    print("------------")
    print("DFPlayer制御")
    print("------------")
    機器番号 = 1  # 1 or 2
    #│
    print("・機器情報")
    print("  1台目：", MMP.DFP_Info(1))
    print("  2台目：", MMP.DFP_Info(2))
    #│
    print("・ボリューム設定 →", MMP.DFP_Volume(機器番号, 20))
    #│
    MP3_1曲再生(機器番号, 1, 1) # メインBGM
    MP3_1曲再生(機器番号, 2, 1) # ザコキャラBGM
    MP3_1曲再生(機器番号, 3, 1) # ボスキャラBGM
    #│
    print("・停止 →", MMP.DFP_Stop(機器番号))
    #┴

#───────────────────────────
def MP3_1曲再生(arg機器番号=1, argフォルダ=1, argトラック=1):
    #┬
    print("・フォルダ{}のトラック{}を再生".format(argフォルダ, argトラック))
    print(MMP.DFP_PlayFolderTrack(arg機器番号, argフォルダ, argトラック))
    time.sleep(5)
    #┴

#======================================================
# スクリプトとして実行された場合のみ main を実行
if __name__ == "__main__":
    main()
