#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：敵機(移動プロセス)
#┠─────────────────────────────────────
#┃更新コントローラが移動プロセスで実行するアクション・メソッド
#┃・下位にデータセット･クラス(仕様)を持つ
#┃※画面外に移動した際、オブジェクトを削除する
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
from main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self   ,
            引数_仕様   ): #① 個体の仕様
        #┬
        #○DBのキーIDを用意する  
        self.速度Y    = 引数_仕様.DB[ 引数_仕様.検索ID ][1][0]
        self.速度X    = 引数_仕様.DB[ 引数_仕様.検索ID ][1][1]
        self.反転間隔 = 引数_仕様.DB[ 引数_仕様.検索ID ][1][2]
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._個体  = 引数_個体
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #│
        #〇≫データセットを用意する
        self.仕様   = 仕様クラス(self._仕様)
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○経過時間をカウントする
        self._情報.経過時間 += 1
        #│
        #●前進(下方に移動)する
        self.Fn前進()
        #│
        #●横に移動する
        self.Fn横移動()
        #│
        #●場外は消滅する
        self.Fn場外()
        #┴
	#────────────────────────────────────
    def Fn前進(self):
        #┬
        #○座標Yを変更する
        self._情報.Y += self.仕様.速度Y
        #┴
	#────────────────────────────────────
    def Fn横移動(self):
        #┬
        #○仕様を確認する
        if (self.仕様.速度Y * self.仕様.反転間隔) == 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #◇┐座標Xを移動する
        if self._情報.経過時間 // self.仕様.反転間隔 % 2 == 0:
        #　├┐（反転タイミングの場合）
            #↓
            #○座標Xを右に移動する
            self._情報.X += self.仕様.速度X
            #┴
        else:
        #　└┐（その他）
            #↓
            #○座標Xを左に移動する
            self._情報.X -= self.仕様.速度X
        #┴　┴
	#────────────────────────────────────
    def Fn場外(self):
        #┬
        #○位置を確認する
        if (self._情報.Y < DS.仕様.画面高): return
        #│＼（画面内の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐場外に出た後の処理をする
        if self._仕様.ボス区分:
        #　├┐（ボス区分がＯＮの場合）
            #↓
            #○画面先頭に戻す
            self._情報.Y = -DS.仕様.キャラ幅.ボス
        else:
        #　└┐（その他）
            #↓
            #●この個体を削除する
            if self._個体 in self._仕様.格納先: self._仕様.格納先.remove(self._個体)
        #┴　┴