#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃コントローラ：描画：表現プロセス
#┠─────────────────────────────────────
#┃各シーンのゲーム状況を画面や立体物で表す
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from   main.データセット import データセット as DS

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│プロセス実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●描画アクションを実行する
        DS.obj.シーン[DS.情報.シーン].FN表現.実行()
        #│
        #△┐ゲーム情報を画面表示する
        if len(DS.obj.運搬機) > 0:
        #　├┐（運搬機コンテナが空の場合）
            #↓
            #○運搬機から、得点を用意する
            救出数1 = DS.obj.運搬機[0].情報.救出数
            救出数2 = DS.obj.運搬機[1].情報.救出数
            #┴
        else:
        #　└┐（その他）
            #↓
            #○得点を初期値(0点)で用意する
            救出数1 = 0
            救出数2 = 0
            #┴
        #│
        #○得点を画面表示する
        pyxel.text(18, 2, str(救出数1).zfill(4), 7)
        pyxel.text(88, 2, str(救出数2).zfill(4), 7)
        #┴