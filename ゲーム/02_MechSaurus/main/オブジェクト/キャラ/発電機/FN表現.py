#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃結果機能→表現プロセスのアクションメソッド
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from   main.データセット import データセット as DS
import main.GAME共通                         as 共通処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 表現クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):   #① 個体オブジェクト
        #┬
        #○個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #┴
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #●立体物で表現する
        self.Fn表現_立体()
        #│
        #●画面で表現する
        self.Fn表現_画面()
        #┴
	#────────────────────────────────────
    def Fn表現_立体(self):
        #┬
        #◇┐方向指示を表現する
        チーム   = self._仕様.チーム番号
        角度     = DS.obj.発電機[チーム].情報.角度
        左右判定 = 共通処理.発電機.右足判定(角度)
        if 左右判定:
        #　├┐（左脚の場合）
            #↓
            #●左脚を指示する
            共通処理.入出力.MMP.PWM_VALUE(
                DS.サーボ.小屋.首[チーム]   ,
                DS.サーボ.小屋.最大         )
        else       :
        #　└┐（その他）
            #↓
            #●右脚を指示する
            共通処理.入出力.MMP.PWM_VALUE(
                DS.サーボ.小屋.首[チーム]   ,
                DS.サーボ.小屋.最小         )
        #┴ ┴
	#────────────────────────────────────
    def Fn表現_画面(self):
        #┬
        #◇┐方向指示を表現する
        チーム   = self._仕様.チーム番号
        角度     = self._情報.角度
        左右判定 = 共通処理.発電機.右足判定(角度)
        if 左右判定: pyxel.blt(25+70*チーム,25+55*チーム, 0, 80,0, 24,56, 0)
        else       : pyxel.blt( 2+70*チーム,25+55*チーム, 0, 56,0, 24,56, 0)
        #　├┐（フレーム処理タイミングの場合）
            #↓
            #○左脚を指示する
        #　└┐（その他）
            #↓
            #○右脚を指示する
        #┴　┴
